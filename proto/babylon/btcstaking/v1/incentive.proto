syntax = "proto3";
package babylon.btcstaking.v1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/crypto/secp256k1/keys.proto";

option go_package = "github.com/babylonchain/babylon/x/btcstaking/types";

// RewardDistCache is the cache for reward distribution of BTC validators at a height
message RewardDistCache {
    uint64 total_voting_power = 1;
    // btc_vals is a list of BTC validators' voting power information 
    repeated BTCValDistInfo btc_vals = 2;
}

// BTCValDistInfo is the reward distribution of a BTC validator and its BTC delegations
message BTCValDistInfo {
    // btc_pk is the Bitcoin secp256k1 PK of this BTC validator
    // the PK follows encoding in BIP-340 spec
    bytes btc_pk = 1 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey" ];
    // babylon_pk is the Babylon public key of the BTC validator
    cosmos.crypto.secp256k1.PubKey babylon_pk = 2;
    // commission defines the commission rate of BTC validator
    string commission = 3  [
        (cosmos_proto.scalar)  = "cosmos.Dec",
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"
    ];
    // total_voting_power is the total voting power of the BTC validator
    uint64 total_voting_power = 4;
    // btc_dels is a list of BTC delegations' voting power information under this BTC validator
    repeated BTCDelDistInfo btc_dels = 5;
}

// BTCDelDistInfo contains the information related to reward distribution for a BTC delegations
message BTCDelDistInfo {
    // babylon_pk is the Babylon public key of the BTC delegations
    cosmos.crypto.secp256k1.PubKey babylon_pk = 1;
    // voting_power is the voting power of the BTC delegation
    uint64 voting_power = 2;
}