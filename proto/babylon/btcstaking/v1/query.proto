syntax = "proto3";
package babylon.btcstaking.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "babylon/btcstaking/v1/params.proto";
import "babylon/btcstaking/v1/btcstaking.proto";

option go_package = "github.com/babylonchain/babylon/x/btcstaking/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/babylonchain/babylon/btcstaking/v1/params";
  }

  // BTCValidators queries all btc validators
  rpc BTCValidators(QueryBTCValidatorsRequest) returns (QueryBTCValidatorsResponse) {
    option (google.api.http).get = "/babylonchain/babylon/btcstaking/v1/btc_validators";
  }

  // BTCValidatorsAtHeight queries btc validators with non zero voting power at given height.
  rpc BTCValidatorsAtHeight(QueryBTCValidatorsAtHeightRequest) returns (QueryBTCValidatorsAtHeightResponse) {
    option (google.api.http).get = "/babylonchain/babylon/btcstaking/v1/btc_validators/{height}";
  }

  // BTCValidatorDelegations queries all btc delegations of the given btc validator
  rpc BTCValidatorDelegations(QueryBTCValidatorDelegationsRequest) returns (QueryBTCValidatorDelegationsResponse) {
    option (google.api.http).get = "/babylonchain/babylon/btcstaking/v1/btc_validators/{val_btc_pk_hex}/delegations";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryBTCValidatorsRequest is the request type for the
// Query/BTCValidators RPC method.
message QueryBTCValidatorsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryBTCValidatorsResponse is the response type for the
// Query/BTCValidators RPC method.
message QueryBTCValidatorsResponse {
  // btc_validators contains all the btc validators
  repeated BTCValidator btc_validators = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryBTCValidatorsAtHeightRequest is the request type for the
// Query/BTCValidatorsAtHeight RPC method.
message QueryBTCValidatorsAtHeightRequest {
  // height defines at which Babylon height to query the btc validators info.
  uint64 height = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryBTCValidatorsAtHeightResponse is the response type for the
// Query/BTCValidatorsAtHeight RPC method.
message QueryBTCValidatorsAtHeightResponse {
  // btc_validators contains all the queried btc validators.
  repeated BTCValidatorWithMeta btc_validators = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryBTCValidatorDelegationsRequest is the request type for the
// Query/BTCValidatorDelegations RPC method.
message QueryBTCValidatorDelegationsRequest {
  // val_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the BTC validator that
  // this BTC delegation delegates to
  // the PK follows encoding in BIP-340 spec
  string val_btc_pk_hex = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryBTCValidatorDelegationsResponse is the response type for the
// Query/BTCValidatorDelegations RPC method.
message QueryBTCValidatorDelegationsResponse {
  // btc_validators contains all the queried btc delegations.
  repeated BTCDelegation btc_delegations = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
