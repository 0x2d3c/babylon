syntax = "proto3";
package babylon.btcstaking.v1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/crypto/secp256k1/keys.proto";
import "cosmos/staking/v1beta1/staking.proto";

option go_package = "github.com/babylonchain/babylon/x/btcstaking/types";

// BTCValidator defines a BTC validator
message BTCValidator {
    // description defines the description terms for the BTC validator.
    cosmos.staking.v1beta1.Description description = 1;
    // commission defines the commission rate of BTC validator.
    string commission = 2  [
        (cosmos_proto.scalar)  = "cosmos.Dec",
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"
    ];
    // babylon_pk is the Babylon secp256k1 PK of this BTC validator
    cosmos.crypto.secp256k1.PubKey babylon_pk = 3;
    // btc_pk is the Bitcoin secp256k1 PK of this BTC validator
    // the PK follows encoding in BIP-340 spec
    bytes btc_pk = 4 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey" ];
    // pop is the proof of possession of babylon_pk and btc_pk
    ProofOfPossession pop = 5;
    // slashed_babylon_height indicates the Babylon height when
    // the BTC validator is slashed.
    // if it's 0 then the BTC validator is not slashed
    uint64 slashed_babylon_height = 6;
    // slashed_btc_height indicates the BTC height when
    // the BTC validator is slashed.
    // if it's 0 then the BTC validator is not slashed
    uint64 slashed_btc_height = 7;
}

// BTCValidatorWithMeta wraps the BTCValidator with meta data.
message BTCValidatorWithMeta {
    // btc_pk is the Bitcoin secp256k1 PK of this BTC validator
    // the PK follows encoding in BIP-340 spec
    bytes btc_pk = 1 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey" ];
    // height is the queried Babylon height
    uint64 height = 2;
    // voting_power is the voting power of this BTC validator at the given height
    uint64 voting_power = 3;
    // slashed_babylon_height indicates the Babylon height when
    // the BTC validator is slashed.
    // if it's 0 then the BTC validator is not slashed
    uint64 slashed_babylon_height = 4;
    // slashed_btc_height indicates the BTC height when
    // the BTC validator is slashed.
    // if it's 0 then the BTC validator is not slashed
    uint64 slashed_btc_height = 5;
}

// BTCDelegation defines a BTC delegation
message BTCDelegation {
    // babylon_pk is the Babylon secp256k1 PK of this BTC delegation
    cosmos.crypto.secp256k1.PubKey babylon_pk = 1;
    // btc_pk is the Bitcoin secp256k1 PK of this BTC delegation
    // the PK follows encoding in BIP-340 spec
    bytes btc_pk = 2 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey" ];
    // pop is the proof of possession of babylon_pk and btc_pk
    ProofOfPossession pop = 3;
    // val_btc_pk is the Bitcoin secp256k1 PK of the BTC validator that
    // this BTC delegation delegates to
    // the PK follows encoding in BIP-340 spec
    bytes val_btc_pk = 4 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey" ];
    // start_height is the start BTC height of the BTC delegation
    // it is the start BTC height of the timelock
    uint64 start_height = 5;
    // end_height is the end height of the BTC delegation
    // it is the end BTC height of the timelock - w
    uint64 end_height = 6;
    // total_sat is the total amount of BTC stakes in this delegation
    // quantified in satoshi
    uint64 total_sat = 7;
    // staking_tx is the staking tx
    BabylonBTCTaprootTx staking_tx = 8;
    // slashing_tx is the slashing tx
    // It is partially signed by SK corresponding to btc_pk, but not signed by
    // validator or jury yet.
    bytes slashing_tx = 9 [ (gogoproto.customtype) = "BTCSlashingTx" ];
    // delegator_sig is the signature on the slashing tx
    // by the delegator (i.e., SK corresponding to btc_pk).
    // It will be a part of the witness for the staking tx output.
    bytes delegator_sig = 10 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature" ];
    // jury_sig is the signature signature on the slashing tx
    // by the jury (i.e., SK corresponding to jury_pk in params)
    // It will be a part of the witness for the staking tx output.
    bytes jury_sig = 11 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature" ];

    // if this object is present it menans that staker requested undelegation, and whole
    // delegation is being undelegated.
    // TODO: Consider whether it would be better to store it in separate store, and not
    // directly in delegation object
    BTCUndelegation btc_undelegation = 12;
}

// BTCUndelegation signalizes that the delegation is being undelegated
message BTCUndelegation {
    // unbonding_tx is the transaction which will transfer the funds from staking
    // output to unbonding output. Unbonding output will usually have lower timelock
    // than staking output.
    BabylonBTCTaprootTx unbonding_tx = 1;
    // slashing_tx is the slashing tx for unbodning transactions
    // It is partially signed by SK corresponding to btc_pk, but not signed by
    // validator or jury yet.
    bytes slashing_tx = 2 [ (gogoproto.customtype) = "BTCSlashingTx" ];
    // delegator_slashing_sig is the signature on the slashing tx
    // by the delegator (i.e., SK corresponding to btc_pk).
    // It will be a part of the witness for the unbodning tx output.
    bytes delegator_slashing_sig = 3 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature" ];
    // jury_slashing_sig is the signature on the slashing tx
    // by the jury (i.e., SK corresponding to jury_pk in params)
    // It must be provided after processing undelagate message by Babylon
    bytes jury_slashing_sig = 4 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature" ];
    // jury_unbonding_sig is the signature on the unbonding tx
    // by the jury (i.e., SK corresponding to jury_pk in params)
    // It must be provided after processing undelagate message by Babylon and after
    // validator sig will be provided by validator
    bytes jury_unbonding_sig = 5 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature" ];
    // validator_unbonding_sig is the signature on the unbonding tx
    // by the validator (i.e., SK corresponding to jury_pk in params)
    // It must be provided after processing undelagate message by Babylon
    bytes validator_unbonding_sig = 6 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature" ];
}

// BTCDelegatorDelegations is a collection of BTC delegations, typically from the same delegator.
message BTCDelegatorDelegations {
    repeated BTCDelegation dels = 1;
}

// ProofOfPossession is the proof of possession that a Babylon secp256k1
// secret key and a Bitcoin secp256k1 secret key are held by the same
// person
message ProofOfPossession {
    // babylon_sig is the signature generated via sign(sk_babylon, pk_btc)
    bytes babylon_sig = 1;
    // btc_sig is the signature generated via sign(sk_btc, babylon_sig)
    // the signature follows encoding in BIP-340 spec
    bytes btc_sig = 2 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature" ];
}

// BabylonBtcTaprootTx is the bitcoin transaction which contains script recognized by Babylon and
// transaction which commits to the provided script.
message BabylonBTCTaprootTx {
    // tx is the transaction bytes
    bytes tx = 1;
    // script is the script recognized by Babylon
    bytes script = 2;
}

// BTCDelegationStatus is the status of a delegation.
enum BTCDelegationStatus {
    // PENDING defines a delegation that is waiting for a jury signature to become active.
    PENDING = 0;
    // ACTIVE defines a delegation that has voting power
    ACTIVE = 1;
    // UNBONDING defines a delegation that is being unbonded i.e it received an unbonding tx
    // from staker, but not yet received signatures from validator and jury.
    // Delegation in this state already lost its voting power.
    UNBONDING = 2;
    // EXPIRED defines a delegation that has expired
    EXPIRED = 3;
}

