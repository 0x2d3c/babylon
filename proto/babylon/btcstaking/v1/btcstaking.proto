syntax = "proto3";
package babylon.btcstaking.v1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/crypto/secp256k1/keys.proto";
import "cosmos/staking/v1beta1/staking.proto";
import "babylon/btcstaking/v1/pop.proto";

option go_package = "github.com/babylonchain/babylon/x/btcstaking/types";

// BTCValidator defines a BTC validator
message BTCValidator {
    // description defines the description terms for the BTC validator.
    cosmos.staking.v1beta1.Description description = 1;
    // commission defines the commission rate of BTC validator.
    string commission = 2  [
        (cosmos_proto.scalar)  = "cosmos.Dec",
        (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec"
    ];
    // babylon_pk is the Babylon secp256k1 PK of this BTC validator
    cosmos.crypto.secp256k1.PubKey babylon_pk = 3;
    // btc_pk is the Bitcoin secp256k1 PK of this BTC validator
    // the PK follows encoding in BIP-340 spec
    bytes btc_pk = 4 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey" ];
    // pop is the proof of possession of babylon_pk and btc_pk
    ProofOfPossession pop = 5;
    // slashed_babylon_height indicates the Babylon height when
    // the BTC validator is slashed.
    // if it's 0 then the BTC validator is not slashed
    uint64 slashed_babylon_height = 6;
    // slashed_btc_height indicates the BTC height when
    // the BTC validator is slashed.
    // if it's 0 then the BTC validator is not slashed
    uint64 slashed_btc_height = 7;
}

// BTCValidatorWithMeta wraps the BTCValidator with meta data.
message BTCValidatorWithMeta {
    // btc_pk is the Bitcoin secp256k1 PK of this BTC validator
    // the PK follows encoding in BIP-340 spec
    bytes btc_pk = 1 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey" ];
    // height is the queried Babylon height
    uint64 height = 2;
    // voting_power is the voting power of this BTC validator at the given height
    uint64 voting_power = 3;
    // slashed_babylon_height indicates the Babylon height when
    // the BTC validator is slashed.
    // if it's 0 then the BTC validator is not slashed
    uint64 slashed_babylon_height = 4;
    // slashed_btc_height indicates the BTC height when
    // the BTC validator is slashed.
    // if it's 0 then the BTC validator is not slashed
    uint64 slashed_btc_height = 5;
}

// BTCDelegation defines a BTC delegation
message BTCDelegation {
    // babylon_pk is the Babylon secp256k1 PK of this BTC delegation
    cosmos.crypto.secp256k1.PubKey babylon_pk = 1;
    // btc_pk is the Bitcoin secp256k1 PK of this BTC delegation
    // the PK follows encoding in BIP-340 spec
    bytes btc_pk = 2 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey" ];
    // pop is the proof of possession of babylon_pk and btc_pk
    ProofOfPossession pop = 3;
    // val_btc_pk_list is the list of BIP-340 PKs of the BTC validators that
    // this BTC delegation delegates to
    // If there is more than 1 PKs, then this means the delegation is restaked
    // to multiple BTC validators
    repeated bytes val_btc_pk_list = 4 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey" ];
    // start_height is the start BTC height of the BTC delegation
    // it is the start BTC height of the timelock
    uint64 start_height = 5;
    // end_height is the end height of the BTC delegation
    // it is the end BTC height of the timelock - w
    uint64 end_height = 6;
    // total_sat is the total amount of BTC stakes in this delegation
    // quantified in satoshi
    uint64 total_sat = 7;
    // staking_tx is the staking tx
    bytes staking_tx  = 8;
    // staking_output_idx is the index of the staking output in the staking tx
    uint32 staking_output_idx = 9;
    // slashing_tx is the slashing tx
    // It is partially signed by SK corresponding to btc_pk, but not signed by
    // validator or covenant yet.
    bytes slashing_tx = 10 [ (gogoproto.customtype) = "BTCSlashingTx" ];
    // delegator_sig is the signature on the slashing tx
    // by the delegator (i.e., SK corresponding to btc_pk).
    // It will be a part of the witness for the staking tx output.
    bytes delegator_sig = 11 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature" ];
    // covenant_sigs is a list of adaptor signatures on the slashing tx
    // by each covenant member
    // It will be a part of the witness for the staking tx output.
    repeated CovenantAdaptorSignatures covenant_sigs = 12;
    // if this object is present it means that staker requested undelegation, and whole
    // delegation is being undelegated.
    // TODO: Consider whether it would be better to store it in separate store, and not
    // directly in delegation object
    BTCUndelegation btc_undelegation = 13;
}

// BTCUndelegation signalizes that the delegation is being undelegated
message BTCUndelegation {
    // unbonding_tx is the transaction which will transfer the funds from staking
    // output to unbonding output. Unbonding output will usually have lower timelock
    // than staking output.
    bytes unbonding_tx = 1;
    // unbonding_time describes how long the funds will be locked in the unbonding output
    uint32 unbonding_time = 2;
    // slashing_tx is the slashing tx for unbonding transactions
    // It is partially signed by SK corresponding to btc_pk, but not signed by
    // validator or covenant yet.
    bytes slashing_tx = 3 [ (gogoproto.customtype) = "BTCSlashingTx" ];
    // delegator_slashing_sig is the signature on the slashing tx
    // by the delegator (i.e., SK corresponding to btc_pk).
    // It will be a part of the witness for the unbonding tx output.
    bytes delegator_slashing_sig = 4 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature" ];
    // covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
    // by each covenant member
    // It will be a part of the witness for the staking tx output.
    repeated CovenantAdaptorSignatures covenant_slashing_sigs = 5;
    // covenant_unbonding_sig_list is the list of signatures on the unbonding tx
    // by covenant members
    // It must be provided after processing undelagate message by Babylon
    repeated SignatureInfo covenant_unbonding_sig_list = 6;
}


// BTCUndelegationInfo provides all necessary info about the undeleagation
message BTCUndelegationInfo {
    // unbonding_tx is the transaction which will transfer the funds from staking
    // output to unbonding output. Unbonding output will usually have lower timelock
    // than staking output.
    bytes unbonding_tx = 1;

    // unbonding_time describes how long the funds will be locked in the unbonding output
    uint32 unbonding_time = 2;
    // covenant_unbonding_sig_list is the list of signatures on the unbonding tx
    // by covenant members
    repeated SignatureInfo covenant_unbonding_sig_list = 3;
}

// BTCDelegatorDelegations is a collection of BTC delegations from the same delegator.
message BTCDelegatorDelegations {
    repeated BTCDelegation dels = 1;
}

// BTCDelegatorDelegationIndex is a list of staking tx hashes of BTC delegations from the same delegator.
message BTCDelegatorDelegationIndex {
    repeated bytes staking_tx_hash_list = 1;
}

// BTCDelegationStatus is the status of a delegation. There are two possible state
// transition paths:
// 1. PENDING -> ACTIVE -> UNBONDED - this is the typical path when timelock of staking
// transaction expires.
// 2. PENDING _> ACTIVE -> UNBONDING -> UNBONDED - this is the path when staker requests undelegation through
// MsgBTCUndelegate message.
enum BTCDelegationStatus {
    // PENDING defines a delegation that is waiting for a covenant signature to become active.
    PENDING = 0;
    // ACTIVE defines a delegation that has voting power
    ACTIVE = 1;
    // UNBONDING defines a delegation that is being unbonded i.e it received an unbonding tx
    // from staker, but not yet received signatures from validator and covenant.
    // Delegation in this state already lost its voting power.
    UNBONDING = 2;
    // UNBONDED defines a delegation no longer has voting power:
    // - either reaching the end of staking transaction timelock
    // - or receiving unbonding tx and then receiving signatures from validator and covenant for this
    // unbonding tx.
    UNBONDED = 3;
    // ANY is any of the above status
    ANY = 4;
}

// SignatureInfo is a BIP-340 signature together with its signer's BIP-340 PK
message SignatureInfo {
    bytes pk = 1 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey" ];
    bytes sig = 2 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature" ];
}

// CovenantAdaptorSignatures is a list adaptor signatures signed by the
// covenant with different validator's public keys as encryption keys
message CovenantAdaptorSignatures {
    // cov_pk is the public key of the covenant emulator, used as the public key of the adaptor signature
    bytes cov_pk = 1 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey" ];
    // adaptor_sigs is a list of adaptor signatures, each encrypted by a restaked BTC validator's public key
    repeated bytes adaptor_sigs = 2;
}
