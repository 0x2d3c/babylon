syntax = "proto3";
package babylon.btcstaking.v1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos/crypto/secp256k1/keys.proto";
import "babylon/btcstaking/v1/params.proto";
import "babylon/btcstaking/v1/btcstaking.proto";
import "babylon/btccheckpoint/v1/btccheckpoint.proto";

option go_package = "github.com/babylonchain/babylon/x/btcstaking/types";

// Msg defines the Msg service.
service Msg {
  // CreateBTCValidator creates a new BTC validator
  rpc CreateBTCValidator(MsgCreateBTCValidator) returns (MsgCreateBTCValidatorResponse);
  // CreateBTCDelegation creates a new BTC delegation
  rpc CreateBTCDelegation(MsgCreateBTCDelegation) returns (MsgCreateBTCDelegationResponse);
  // UpdateParams updates the btcstaking module parameters.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgCreateBTCValidator is the message for creating a BTC validator
message MsgCreateBTCValidator {
  string signer = 1;
  // babylon_pk is the Babylon secp256k1 PK of this BTC validator
  cosmos.crypto.secp256k1.PubKey babylon_pk = 2;
  // btc_pk is the Bitcoin secp256k1 PK of this BTC validator
  // the PK follows encoding in BIP-340 spec
  bytes btc_pk = 3 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey" ];
  // pop is the proof of possession of babylon_pk and btc_pk
  ProofOfPossession pop = 4;
}
// MsgCreateBTCValidatorResponse is the response for MsgCreateBTCValidator
message MsgCreateBTCValidatorResponse {}

// MsgCreateBTCDelegation is the message for creating a BTC delegation
message MsgCreateBTCDelegation {
  string signer = 1;
  // babylon_pk is the Babylon secp256k1 PK of this BTC delegation
  cosmos.crypto.secp256k1.PubKey babylon_pk = 2;
  // pop is the proof of possession of babylon_pk and btc_pk
  ProofOfPossession pop = 3;
  // staking_tx is the staking tx 
  StakingTx staking_tx = 4;
  // staking_tx_info is the tx info of the staking tx, including the Merkle proof
  babylon.btccheckpoint.v1.TransactionInfo staking_tx_info = 5;
  // slashing_tx is the slashing tx
  // Note that the tx itself does not contain signatures, which are off-chain.
  bytes slashing_tx = 6 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BTCSlashingTx" ];
  // delegator_sig is the signature on the slashing tx by the delegator (i.e., SK corresponding to btc_pk). 
  // It will be a part of the witness for the staking tx output.
  // The staking tx output further needs signatures from jury and validator in
  // order to be spendable.
  bytes delegator_sig = 7 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature" ];
}
// MsgCreateBTCDelegationResponse is the response for MsgCreateBTCDelegation
message MsgCreateBTCDelegationResponse {}

// MsgUpdateParams defines a message for updating btcstaking module parameters.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  // just FYI: cosmos.AddressString marks that this field should use type alias
  // for AddressString instead of string, but the functionality is not yet implemented
  // in cosmos-proto
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the finality parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateParamsResponse is the response to the MsgUpdateParams message.
message MsgUpdateParamsResponse {}

    