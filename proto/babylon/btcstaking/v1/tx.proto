syntax = "proto3";
package babylon.btcstaking.v1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos/crypto/secp256k1/keys.proto";
import "babylon/btcstaking/v1/params.proto";
import "babylon/btccheckpoint/v1/btccheckpoint.proto";
import "cosmos/staking/v1beta1/staking.proto";
import "babylon/btcstaking/v1/pop.proto";

option go_package = "github.com/babylonchain/babylon/x/btcstaking/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // CreateBTCValidator creates a new BTC validator
  rpc CreateBTCValidator(MsgCreateBTCValidator) returns (MsgCreateBTCValidatorResponse);
  // CreateBTCDelegation creates a new BTC delegation
  rpc CreateBTCDelegation(MsgCreateBTCDelegation) returns (MsgCreateBTCDelegationResponse);
  // BtcUndelegate undelegates funds from exsitng btc delegation
  rpc BTCUndelegate(MsgBTCUndelegate) returns (MsgBTCUndelegateResponse);
  // AddCovenantSig handles a signature from covenant for slashing tx of staking tx for delegation
  rpc AddCovenantSig(MsgAddCovenantSig) returns (MsgAddCovenantSigResponse);
  // AddCovenantUnbondingSigs handles two signatures from covenant for:
  // - unbonding tx submitted to babylon by staker
  // - slashing tx corresponding to unbonding tx submitted to babylon by staker
  rpc AddCovenantUnbondingSigs(MsgAddCovenantUnbondingSigs) returns (MsgAddCovenantUnbondingSigsResponse);
  // UpdateParams updates the btcstaking module parameters.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgCreateBTCValidator is the message for creating a BTC validator
message MsgCreateBTCValidator {
  option (cosmos.msg.v1.signer) = "signer";

  string signer = 1;

  // description defines the description terms for the BTC validator.
  cosmos.staking.v1beta1.Description description = 2;
  // commission defines the commission rate of BTC validator.
  string commission = 3 [
    (cosmos_proto.scalar)  = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec"
  ];
  // babylon_pk is the Babylon secp256k1 PK of this BTC validator
  cosmos.crypto.secp256k1.PubKey babylon_pk = 4;
  // btc_pk is the Bitcoin secp256k1 PK of this BTC validator
  // the PK follows encoding in BIP-340 spec
  bytes btc_pk = 5 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey" ];
  // pop is the proof of possession of babylon_pk and btc_pk
  ProofOfPossession pop = 6;
}
// MsgCreateBTCValidatorResponse is the response for MsgCreateBTCValidator
message MsgCreateBTCValidatorResponse {}

// MsgCreateBTCDelegation is the message for creating a BTC delegation
message MsgCreateBTCDelegation {
  option (cosmos.msg.v1.signer) = "signer";

  string signer = 1;
  // babylon_pk is the Babylon secp256k1 PK of this BTC delegation
  cosmos.crypto.secp256k1.PubKey babylon_pk = 2;
  // pop is the proof of possession of babylon_pk and btc_pk
  ProofOfPossession pop = 3;
  // btc_pk is the Bitcoin secp256k1 PK of the BTC delegator
  bytes btc_pk = 4 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey" ];
  // val_btc_pk_list is the list of Bitcoin secp256k1 PKs of the BTC validators, if there is more than one
  // validator pk it means that delegation is re-staked
  repeated bytes val_btc_pk_list = 5 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey" ];
  // staking_time is the time lock used in staking transaction
  uint32 staking_time = 6;
  // staking_value  is amout of satoshis locked in staking output
  int64 staking_value = 7;
  // staking_tx is the staking tx along with the merekle proof of inclusion in btc block
  babylon.btccheckpoint.v1.TransactionInfo staking_tx = 8;
  // slashing_tx is the slashing tx
  // Note that the tx itself does not contain signatures, which are off-chain.
  bytes slashing_tx = 9 [ (gogoproto.customtype) = "BTCSlashingTx" ];
  // delegator_sig is the signature on the slashing tx by the delegator (i.e., SK corresponding to btc_pk).
  // It will be a part of the witness for the staking tx output.
  // The staking tx output further needs signatures from covenant and validator in
  // order to be spendable.
  bytes delegator_sig = 10 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature" ];
}
// MsgCreateBTCDelegationResponse is the response for MsgCreateBTCDelegation
message MsgCreateBTCDelegationResponse {}

// MsgBTCUndelegate is the message undelegating existing and active delegation
message MsgBTCUndelegate {
  option (cosmos.msg.v1.signer) = "signer";

  string signer = 1;
  // unbonding_tx is bitcoin unbonding transaction i.e transaction that spends
  // staking output and sends it to the unbonding output
  bytes unbonding_tx = 2;
  // unbonding_time is the time lock used in unbonding transaction
  uint32 unbonding_time = 3;
  // unbonding_value is amount of satoshis locked in unbonding output.
  // NOTE: staking_value and unbonding_value could be different because of the difference between the fee for staking tx and that for unbonding
  int64 unbonding_value = 4;
  // slashing_tx is the slashing tx which slash unbonding contract
  // Note that the tx itself does not contain signatures, which are off-chain.
  bytes slashing_tx = 5 [ (gogoproto.customtype) = "BTCSlashingTx" ];
  // delegator_slashing_sig is the signature on the slashing tx by the delegator (i.e., SK corresponding to btc_pk).
  bytes delegator_slashing_sig = 6 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature" ];
}

// MsgBtcUndelegateResponse is the response for MsgBtcUndelegate
message MsgBTCUndelegateResponse {}

// MsgAddCovenantSig is the message for handling a signature from covenant
message MsgAddCovenantSig {
  option (cosmos.msg.v1.signer) = "signer";

  string signer = 1;
  // pk is the BTC public key of the covenant member
  bytes pk = 2  [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey" ];
  // staking_tx_hash is the hash of the staking tx.
  // It uniquely identifies a BTC delegation
  string staking_tx_hash = 3;
  // sigs is a list of adaptor signatures of the covenant
  // the order of sigs should respect the order of validators
  // of the corresponding delegation
  repeated bytes sigs = 4;
}
// MsgAddCovenantSigResponse is the response for MsgAddCovenantSig
message MsgAddCovenantSigResponse {}

// MsgUpdateParams defines a message for updating btcstaking module parameters.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  // just FYI: cosmos.AddressString marks that this field should use type alias
  // for AddressString instead of string, but the functionality is not yet implemented
  // in cosmos-proto
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the finality parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateParamsResponse is the response to the MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgAddCovenantUnbondingSigs is the message for handling a signature from covenant
message MsgAddCovenantUnbondingSigs {
  option (cosmos.msg.v1.signer) = "signer";

  string signer = 1;
  // pk is the BTC public key of the covenant member
  bytes pk = 2  [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey" ];
  // staking_tx_hash is the hash of the staking tx.
  // (val_pk, del_pk, staking_tx_hash) uniquely identifies a BTC delegation
  string staking_tx_hash = 3;
  // unbonding_tx_sig is the signature of the covenant on the unbonding tx submitted to babylon
  // the signature follows encoding in BIP-340 spec
  bytes unbonding_tx_sig = 4 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature" ];
  // slashing_unbonding_tx_sigs is a list of adaptor signatures of the covenant
  // on slashing tx corresponding to unbonding tx submitted to babylon
  // the order of sigs should respect the order of validators
  // of the corresponding delegation
  repeated bytes slashing_unbonding_tx_sigs = 5;
}
// MsgAddCovenantSigResponse is the response for MsgAddCovenantSig
message MsgAddCovenantUnbondingSigsResponse {}
