// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/finality/v1/finality.proto

package types

import (
	fmt "fmt"
	github_com_babylonchain_babylon_types "github.com/babylonchain/babylon/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Vote is a vote to a block
type Vote struct {
	// val_btc_pk is the BTC Pk of the validator that casts this vote
	ValBtcPk *github_com_babylonchain_babylon_types.BIP340PubKey `protobuf:"bytes,1,opt,name=val_btc_pk,json=valBtcPk,proto3,customtype=github.com/babylonchain/babylon/types.BIP340PubKey" json:"val_btc_pk,omitempty"`
	// block_height is the height of the voted block
	BlockHeight uint64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// finality_sig is the finality signature to this block
	// where finality signature is an EOTS signature, i.e.,
	// the `s` in a Schnorr signature `(r, s)`
	// `r` is the public randomness that is already committed by the validator
	FinalitySig *github_com_babylonchain_babylon_types.SchnorrEOTSSig `protobuf:"bytes,3,opt,name=finality_sig,json=finalitySig,proto3,customtype=github.com/babylonchain/babylon/types.SchnorrEOTSSig" json:"finality_sig,omitempty"`
}

func (m *Vote) Reset()         { *m = Vote{} }
func (m *Vote) String() string { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()    {}
func (*Vote) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca5b87e52e3e6d02, []int{0}
}
func (m *Vote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vote.Merge(m, src)
}
func (m *Vote) XXX_Size() int {
	return m.Size()
}
func (m *Vote) XXX_DiscardUnknown() {
	xxx_messageInfo_Vote.DiscardUnknown(m)
}

var xxx_messageInfo_Vote proto.InternalMessageInfo

func (m *Vote) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// IndexedBlock is the block with some indexed info
type IndexedBlock struct {
	// height is the height of the block
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// hash is the hash of the block
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// btc_height is the height of the BTC tip upon EndBlock of this block
	BtcHeight uint64 `protobuf:"varint,3,opt,name=btc_height,json=btcHeight,proto3" json:"btc_height,omitempty"`
	// btc_hash is the hash of the BTC tip upon EndBlock of this block
	BtcHash *github_com_babylonchain_babylon_types.BTCHeaderHashBytes `protobuf:"bytes,4,opt,name=btc_hash,json=btcHash,proto3,customtype=github.com/babylonchain/babylon/types.BTCHeaderHashBytes" json:"btc_hash,omitempty"`
}

func (m *IndexedBlock) Reset()         { *m = IndexedBlock{} }
func (m *IndexedBlock) String() string { return proto.CompactTextString(m) }
func (*IndexedBlock) ProtoMessage()    {}
func (*IndexedBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca5b87e52e3e6d02, []int{1}
}
func (m *IndexedBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexedBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexedBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexedBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexedBlock.Merge(m, src)
}
func (m *IndexedBlock) XXX_Size() int {
	return m.Size()
}
func (m *IndexedBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexedBlock.DiscardUnknown(m)
}

var xxx_messageInfo_IndexedBlock proto.InternalMessageInfo

func (m *IndexedBlock) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *IndexedBlock) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *IndexedBlock) GetBtcHeight() uint64 {
	if m != nil {
		return m.BtcHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*Vote)(nil), "babylon.finality.v1.Vote")
	proto.RegisterType((*IndexedBlock)(nil), "babylon.finality.v1.IndexedBlock")
}

func init() {
	proto.RegisterFile("babylon/finality/v1/finality.proto", fileDescriptor_ca5b87e52e3e6d02)
}

var fileDescriptor_ca5b87e52e3e6d02 = []byte{
	// 368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4f, 0x6b, 0xe2, 0x40,
	0x18, 0xc6, 0x9d, 0x35, 0xb8, 0xee, 0x98, 0xd3, 0xec, 0xb2, 0xc8, 0xc2, 0x46, 0xd7, 0x93, 0xa7,
	0x44, 0x57, 0x29, 0x1e, 0x7a, 0x4a, 0x29, 0x68, 0x7b, 0xa8, 0x24, 0xd2, 0x42, 0x7b, 0x08, 0x33,
	0x71, 0x9a, 0x19, 0x4c, 0x33, 0x92, 0x8c, 0xc1, 0x7c, 0x8b, 0x7e, 0x96, 0x7e, 0x8a, 0x1e, 0x3d,
	0x16, 0x29, 0x52, 0xf4, 0x8b, 0x94, 0x4c, 0xa3, 0x3d, 0xd6, 0xdb, 0xfb, 0xe7, 0xc9, 0xf3, 0xfc,
	0x78, 0x33, 0xb0, 0x45, 0x30, 0xc9, 0x42, 0x11, 0x59, 0xf7, 0x3c, 0xc2, 0x21, 0x97, 0x99, 0x95,
	0x76, 0x0f, 0xb5, 0x39, 0x8f, 0x85, 0x14, 0xe8, 0x67, 0xa1, 0x31, 0x0f, 0xf3, 0xb4, 0xfb, 0xe7,
	0x57, 0x20, 0x02, 0xa1, 0xf6, 0x56, 0x5e, 0x7d, 0x48, 0x5b, 0xaf, 0x00, 0x6a, 0xd7, 0x42, 0x52,
	0x34, 0x81, 0x30, 0xc5, 0xa1, 0x47, 0xa4, 0xef, 0xcd, 0x67, 0x75, 0xd0, 0x04, 0x6d, 0xdd, 0x3e,
	0x59, 0x6f, 0x1a, 0xff, 0x03, 0x2e, 0xd9, 0x82, 0x98, 0xbe, 0x78, 0xb0, 0x0a, 0x5b, 0x9f, 0x61,
	0x1e, 0xed, 0x1b, 0x4b, 0x66, 0x73, 0x9a, 0x98, 0xf6, 0x68, 0xdc, 0xeb, 0x77, 0xc6, 0x0b, 0x72,
	0x49, 0x33, 0xa7, 0x9a, 0xe2, 0xd0, 0x96, 0xfe, 0x78, 0x86, 0xfe, 0x41, 0x9d, 0x84, 0xc2, 0x9f,
	0x79, 0x8c, 0xf2, 0x80, 0xc9, 0xfa, 0xb7, 0x26, 0x68, 0x6b, 0x4e, 0x4d, 0xcd, 0x86, 0x6a, 0x84,
	0xee, 0xa0, 0xbe, 0xc7, 0xf4, 0x12, 0x1e, 0xd4, 0xcb, 0x2a, 0x7a, 0xb0, 0xde, 0x34, 0xfa, 0xc7,
	0x45, 0xbb, 0x3e, 0x8b, 0x44, 0x1c, 0x9f, 0x5f, 0x4d, 0x5c, 0x97, 0x07, 0x4e, 0x6d, 0xef, 0xe6,
	0xf2, 0xa0, 0xf5, 0x04, 0xa0, 0x3e, 0x8a, 0xa6, 0x74, 0x49, 0xa7, 0x76, 0x9e, 0x89, 0x7e, 0xc3,
	0x4a, 0x81, 0x02, 0x14, 0x4a, 0xd1, 0x21, 0x04, 0x35, 0x86, 0x13, 0xa6, 0x00, 0x75, 0x47, 0xd5,
	0xe8, 0x2f, 0x84, 0xf9, 0x39, 0x0a, 0x7d, 0x59, 0xe9, 0x7f, 0x10, 0xe9, 0x17, 0xe0, 0x37, 0xb0,
	0xaa, 0xd6, 0xf9, 0x67, 0x9a, 0x82, 0x3e, 0x5d, 0x6f, 0x1a, 0x83, 0x23, 0xef, 0x35, 0x39, 0x1b,
	0x52, 0x3c, 0xa5, 0xf1, 0x10, 0x27, 0xcc, 0xce, 0x24, 0x4d, 0x9c, 0xef, 0xb9, 0x75, 0xde, 0x5d,
	0x3c, 0x6f, 0x0d, 0xb0, 0xda, 0x1a, 0xe0, 0x6d, 0x6b, 0x80, 0xc7, 0x9d, 0x51, 0x5a, 0xed, 0x8c,
	0xd2, 0xcb, 0xce, 0x28, 0xdd, 0x76, 0xbe, 0x32, 0x5f, 0x7e, 0x3e, 0x0b, 0x95, 0x43, 0x2a, 0xea,
	0x37, 0xf7, 0xde, 0x03, 0x00, 0x00, 0xff, 0xff, 0x5c, 0xc2, 0xbd, 0x0a, 0x37, 0x02, 0x00, 0x00,
}

func (m *Vote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FinalitySig != nil {
		{
			size := m.FinalitySig.Size()
			i -= size
			if _, err := m.FinalitySig.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintFinality(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintFinality(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.ValBtcPk != nil {
		{
			size := m.ValBtcPk.Size()
			i -= size
			if _, err := m.ValBtcPk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintFinality(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IndexedBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexedBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexedBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BtcHash != nil {
		{
			size := m.BtcHash.Size()
			i -= size
			if _, err := m.BtcHash.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintFinality(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.BtcHeight != 0 {
		i = encodeVarintFinality(dAtA, i, uint64(m.BtcHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintFinality(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintFinality(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFinality(dAtA []byte, offset int, v uint64) int {
	offset -= sovFinality(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Vote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValBtcPk != nil {
		l = m.ValBtcPk.Size()
		n += 1 + l + sovFinality(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovFinality(uint64(m.BlockHeight))
	}
	if m.FinalitySig != nil {
		l = m.FinalitySig.Size()
		n += 1 + l + sovFinality(uint64(l))
	}
	return n
}

func (m *IndexedBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovFinality(uint64(m.Height))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovFinality(uint64(l))
	}
	if m.BtcHeight != 0 {
		n += 1 + sovFinality(uint64(m.BtcHeight))
	}
	if m.BtcHash != nil {
		l = m.BtcHash.Size()
		n += 1 + l + sovFinality(uint64(l))
	}
	return n
}

func sovFinality(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFinality(x uint64) (n int) {
	return sovFinality(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Vote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFinality
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValBtcPk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFinality
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFinality
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonchain_babylon_types.BIP340PubKey
			m.ValBtcPk = &v
			if err := m.ValBtcPk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalitySig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFinality
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFinality
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonchain_babylon_types.SchnorrEOTSSig
			m.FinalitySig = &v
			if err := m.FinalitySig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFinality(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFinality
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexedBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFinality
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexedBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexedBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFinality
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFinality
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcHeight", wireType)
			}
			m.BtcHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BtcHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFinality
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFinality
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonchain_babylon_types.BTCHeaderHashBytes
			m.BtcHash = &v
			if err := m.BtcHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFinality(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFinality
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFinality(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFinality
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFinality
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFinality
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFinality
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFinality
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFinality        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFinality          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFinality = fmt.Errorf("proto: unexpected end of group")
)
