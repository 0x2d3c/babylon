// Code generated by MockGen. DO NOT EDIT.
// Source: x/finality/types/expected_keepers.go

// Package types is a generated GoMock package.
package types

import (
	reflect "reflect"

	types "github.com/babylonchain/babylon/x/btcstaking/types"
	types0 "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/x/auth/types"
	gomock "github.com/golang/mock/gomock"
)

// MockBTCStakingKeeper is a mock of BTCStakingKeeper interface.
type MockBTCStakingKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockBTCStakingKeeperMockRecorder
}

// MockBTCStakingKeeperMockRecorder is the mock recorder for MockBTCStakingKeeper.
type MockBTCStakingKeeperMockRecorder struct {
	mock *MockBTCStakingKeeper
}

// NewMockBTCStakingKeeper creates a new mock instance.
func NewMockBTCStakingKeeper(ctrl *gomock.Controller) *MockBTCStakingKeeper {
	mock := &MockBTCStakingKeeper{ctrl: ctrl}
	mock.recorder = &MockBTCStakingKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBTCStakingKeeper) EXPECT() *MockBTCStakingKeeperMockRecorder {
	return m.recorder
}

// GetBTCStakingActivatedHeight mocks base method.
func (m *MockBTCStakingKeeper) GetBTCStakingActivatedHeight(ctx types0.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBTCStakingActivatedHeight", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBTCStakingActivatedHeight indicates an expected call of GetBTCStakingActivatedHeight.
func (mr *MockBTCStakingKeeperMockRecorder) GetBTCStakingActivatedHeight(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBTCStakingActivatedHeight", reflect.TypeOf((*MockBTCStakingKeeper)(nil).GetBTCStakingActivatedHeight), ctx)
}

// GetBTCValidator mocks base method.
func (m *MockBTCStakingKeeper) GetBTCValidator(ctx types0.Context, valBTCPK []byte) (*types.BTCValidator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBTCValidator", ctx, valBTCPK)
	ret0, _ := ret[0].(*types.BTCValidator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBTCValidator indicates an expected call of GetBTCValidator.
func (mr *MockBTCStakingKeeperMockRecorder) GetBTCValidator(ctx, valBTCPK interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBTCValidator", reflect.TypeOf((*MockBTCStakingKeeper)(nil).GetBTCValidator), ctx, valBTCPK)
}

// GetRewardDistCache mocks base method.
func (m *MockBTCStakingKeeper) GetRewardDistCache(ctx types0.Context, height uint64) (*types.RewardDistCache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRewardDistCache", ctx, height)
	ret0, _ := ret[0].(*types.RewardDistCache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRewardDistCache indicates an expected call of GetRewardDistCache.
func (mr *MockBTCStakingKeeperMockRecorder) GetRewardDistCache(ctx, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewardDistCache", reflect.TypeOf((*MockBTCStakingKeeper)(nil).GetRewardDistCache), ctx, height)
}

// GetVotingPower mocks base method.
func (m *MockBTCStakingKeeper) GetVotingPower(ctx types0.Context, valBTCPK []byte, height uint64) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVotingPower", ctx, valBTCPK, height)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetVotingPower indicates an expected call of GetVotingPower.
func (mr *MockBTCStakingKeeperMockRecorder) GetVotingPower(ctx, valBTCPK, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVotingPower", reflect.TypeOf((*MockBTCStakingKeeper)(nil).GetVotingPower), ctx, valBTCPK, height)
}

// GetVotingPowerTable mocks base method.
func (m *MockBTCStakingKeeper) GetVotingPowerTable(ctx types0.Context, height uint64) map[string]uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVotingPowerTable", ctx, height)
	ret0, _ := ret[0].(map[string]uint64)
	return ret0
}

// GetVotingPowerTable indicates an expected call of GetVotingPowerTable.
func (mr *MockBTCStakingKeeperMockRecorder) GetVotingPowerTable(ctx, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVotingPowerTable", reflect.TypeOf((*MockBTCStakingKeeper)(nil).GetVotingPowerTable), ctx, height)
}

// HasBTCValidator mocks base method.
func (m *MockBTCStakingKeeper) HasBTCValidator(ctx types0.Context, valBTCPK []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasBTCValidator", ctx, valBTCPK)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasBTCValidator indicates an expected call of HasBTCValidator.
func (mr *MockBTCStakingKeeperMockRecorder) HasBTCValidator(ctx, valBTCPK interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasBTCValidator", reflect.TypeOf((*MockBTCStakingKeeper)(nil).HasBTCValidator), ctx, valBTCPK)
}

// RecordRewardDistCache mocks base method.
func (m *MockBTCStakingKeeper) RecordRewardDistCache(ctx types0.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordRewardDistCache", ctx)
}

// RecordRewardDistCache indicates an expected call of RecordRewardDistCache.
func (mr *MockBTCStakingKeeperMockRecorder) RecordRewardDistCache(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordRewardDistCache", reflect.TypeOf((*MockBTCStakingKeeper)(nil).RecordRewardDistCache), ctx)
}

// RemoveRewardDistCache mocks base method.
func (m *MockBTCStakingKeeper) RemoveRewardDistCache(ctx types0.Context, height uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveRewardDistCache", ctx, height)
}

// RemoveRewardDistCache indicates an expected call of RemoveRewardDistCache.
func (mr *MockBTCStakingKeeperMockRecorder) RemoveRewardDistCache(ctx, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRewardDistCache", reflect.TypeOf((*MockBTCStakingKeeper)(nil).RemoveRewardDistCache), ctx, height)
}

// SlashBTCValidator mocks base method.
func (m *MockBTCStakingKeeper) SlashBTCValidator(ctx types0.Context, valBTCPK []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SlashBTCValidator", ctx, valBTCPK)
	ret0, _ := ret[0].(error)
	return ret0
}

// SlashBTCValidator indicates an expected call of SlashBTCValidator.
func (mr *MockBTCStakingKeeperMockRecorder) SlashBTCValidator(ctx, valBTCPK interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlashBTCValidator", reflect.TypeOf((*MockBTCStakingKeeper)(nil).SlashBTCValidator), ctx, valBTCPK)
}

// MockAccountKeeper is a mock of AccountKeeper interface.
type MockAccountKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockAccountKeeperMockRecorder
}

// MockAccountKeeperMockRecorder is the mock recorder for MockAccountKeeper.
type MockAccountKeeperMockRecorder struct {
	mock *MockAccountKeeper
}

// NewMockAccountKeeper creates a new mock instance.
func NewMockAccountKeeper(ctrl *gomock.Controller) *MockAccountKeeper {
	mock := &MockAccountKeeper{ctrl: ctrl}
	mock.recorder = &MockAccountKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountKeeper) EXPECT() *MockAccountKeeperMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockAccountKeeper) GetAccount(ctx types0.Context, addr types0.AccAddress) types1.AccountI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, addr)
	ret0, _ := ret[0].(types1.AccountI)
	return ret0
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountKeeperMockRecorder) GetAccount(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountKeeper)(nil).GetAccount), ctx, addr)
}

// MockBankKeeper is a mock of BankKeeper interface.
type MockBankKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockBankKeeperMockRecorder
}

// MockBankKeeperMockRecorder is the mock recorder for MockBankKeeper.
type MockBankKeeperMockRecorder struct {
	mock *MockBankKeeper
}

// NewMockBankKeeper creates a new mock instance.
func NewMockBankKeeper(ctrl *gomock.Controller) *MockBankKeeper {
	mock := &MockBankKeeper{ctrl: ctrl}
	mock.recorder = &MockBankKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankKeeper) EXPECT() *MockBankKeeperMockRecorder {
	return m.recorder
}

// SpendableCoins mocks base method.
func (m *MockBankKeeper) SpendableCoins(ctx types0.Context, addr types0.AccAddress) types0.Coins {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpendableCoins", ctx, addr)
	ret0, _ := ret[0].(types0.Coins)
	return ret0
}

// SpendableCoins indicates an expected call of SpendableCoins.
func (mr *MockBankKeeperMockRecorder) SpendableCoins(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpendableCoins", reflect.TypeOf((*MockBankKeeper)(nil).SpendableCoins), ctx, addr)
}

// MockIncentiveKeeper is a mock of IncentiveKeeper interface.
type MockIncentiveKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockIncentiveKeeperMockRecorder
}

// MockIncentiveKeeperMockRecorder is the mock recorder for MockIncentiveKeeper.
type MockIncentiveKeeperMockRecorder struct {
	mock *MockIncentiveKeeper
}

// NewMockIncentiveKeeper creates a new mock instance.
func NewMockIncentiveKeeper(ctrl *gomock.Controller) *MockIncentiveKeeper {
	mock := &MockIncentiveKeeper{ctrl: ctrl}
	mock.recorder = &MockIncentiveKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIncentiveKeeper) EXPECT() *MockIncentiveKeeperMockRecorder {
	return m.recorder
}

// RewardBTCStaking mocks base method.
func (m *MockIncentiveKeeper) RewardBTCStaking(ctx types0.Context, height uint64, rdc *types.RewardDistCache) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RewardBTCStaking", ctx, height, rdc)
}

// RewardBTCStaking indicates an expected call of RewardBTCStaking.
func (mr *MockIncentiveKeeperMockRecorder) RewardBTCStaking(ctx, height, rdc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RewardBTCStaking", reflect.TypeOf((*MockIncentiveKeeper)(nil).RewardBTCStaking), ctx, height, rdc)
}
