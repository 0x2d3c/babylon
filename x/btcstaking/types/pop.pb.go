// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/btcstaking/v1/pop.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BTCSigType indicates the type of btc_sig in a pop
type BTCSigType int32

const (
	// BIP340 means the btc_sig will follow the BIP-340 encoding
	BTCSigType_BIP340 BTCSigType = 0
	// BIP322 means the btc_sig will follow the BIP-322 encoding
	BTCSigType_BIP322 BTCSigType = 1
)

var BTCSigType_name = map[int32]string{
	0: "BIP340",
	1: "BIP322",
}

var BTCSigType_value = map[string]int32{
	"BIP340": 0,
	"BIP322": 1,
}

func (x BTCSigType) String() string {
	return proto.EnumName(BTCSigType_name, int32(x))
}

func (BTCSigType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9d6ceb088d9e9f3a, []int{0}
}

// ProofOfPossession is the proof of possession that a Babylon secp256k1
// secret key and a Bitcoin secp256k1 secret key are held by the same
// person
type ProofOfPossession struct {
	// btc_sig_type indicates the type of btc_sig in the pop
	BtcSigType BTCSigType `protobuf:"varint,1,opt,name=btc_sig_type,json=btcSigType,proto3,enum=babylon.btcstaking.v1.BTCSigType" json:"btc_sig_type,omitempty"`
	// babylon_sig is the signature generated via sign(sk_babylon, pk_btc)
	BabylonSig []byte `protobuf:"bytes,2,opt,name=babylon_sig,json=babylonSig,proto3" json:"babylon_sig,omitempty"`
	// btc_sig is the signature generated via sign(sk_btc, babylon_sig)
	// the signature follows encoding in either BIP-340 spec or BIP-322 spec
	BtcSig []byte `protobuf:"bytes,3,opt,name=btc_sig,json=btcSig,proto3" json:"btc_sig,omitempty"`
}

func (m *ProofOfPossession) Reset()         { *m = ProofOfPossession{} }
func (m *ProofOfPossession) String() string { return proto.CompactTextString(m) }
func (*ProofOfPossession) ProtoMessage()    {}
func (*ProofOfPossession) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d6ceb088d9e9f3a, []int{0}
}
func (m *ProofOfPossession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProofOfPossession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProofOfPossession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProofOfPossession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProofOfPossession.Merge(m, src)
}
func (m *ProofOfPossession) XXX_Size() int {
	return m.Size()
}
func (m *ProofOfPossession) XXX_DiscardUnknown() {
	xxx_messageInfo_ProofOfPossession.DiscardUnknown(m)
}

var xxx_messageInfo_ProofOfPossession proto.InternalMessageInfo

func (m *ProofOfPossession) GetBtcSigType() BTCSigType {
	if m != nil {
		return m.BtcSigType
	}
	return BTCSigType_BIP340
}

func (m *ProofOfPossession) GetBabylonSig() []byte {
	if m != nil {
		return m.BabylonSig
	}
	return nil
}

func (m *ProofOfPossession) GetBtcSig() []byte {
	if m != nil {
		return m.BtcSig
	}
	return nil
}

// BIP322Sig is a BIP-322 signature together with the address corresponding to
// the signer
type BIP322Sig struct {
	// address is the signer's address
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// sig is the actual signature in BIP-322 format
	Sig []byte `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (m *BIP322Sig) Reset()         { *m = BIP322Sig{} }
func (m *BIP322Sig) String() string { return proto.CompactTextString(m) }
func (*BIP322Sig) ProtoMessage()    {}
func (*BIP322Sig) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d6ceb088d9e9f3a, []int{1}
}
func (m *BIP322Sig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BIP322Sig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BIP322Sig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BIP322Sig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BIP322Sig.Merge(m, src)
}
func (m *BIP322Sig) XXX_Size() int {
	return m.Size()
}
func (m *BIP322Sig) XXX_DiscardUnknown() {
	xxx_messageInfo_BIP322Sig.DiscardUnknown(m)
}

var xxx_messageInfo_BIP322Sig proto.InternalMessageInfo

func (m *BIP322Sig) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *BIP322Sig) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func init() {
	proto.RegisterEnum("babylon.btcstaking.v1.BTCSigType", BTCSigType_name, BTCSigType_value)
	proto.RegisterType((*ProofOfPossession)(nil), "babylon.btcstaking.v1.ProofOfPossession")
	proto.RegisterType((*BIP322Sig)(nil), "babylon.btcstaking.v1.BIP322Sig")
}

func init() { proto.RegisterFile("babylon/btcstaking/v1/pop.proto", fileDescriptor_9d6ceb088d9e9f3a) }

var fileDescriptor_9d6ceb088d9e9f3a = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4b, 0xc3, 0x30,
	0x1c, 0xc5, 0x1b, 0x07, 0x1b, 0xfb, 0x3b, 0x64, 0x06, 0xc4, 0x9e, 0xb2, 0x39, 0x3c, 0x0c, 0x0f,
	0xa9, 0xcb, 0x04, 0xef, 0xdd, 0x49, 0x10, 0x2c, 0xdd, 0x4e, 0x5e, 0x46, 0xd3, 0x75, 0x5d, 0x50,
	0x9b, 0xd2, 0xc4, 0x61, 0xbf, 0x85, 0xf8, 0xa9, 0x3c, 0xee, 0xe8, 0x51, 0xda, 0x2f, 0x22, 0xad,
	0x29, 0xf5, 0xe0, 0xed, 0xbd, 0xe4, 0xe5, 0x97, 0xc7, 0x83, 0x11, 0x0f, 0x78, 0xfe, 0x2c, 0x13,
	0x87, 0xeb, 0x50, 0xe9, 0xe0, 0x49, 0x24, 0xb1, 0xb3, 0x9f, 0x39, 0xa9, 0x4c, 0x69, 0x9a, 0x49,
	0x2d, 0xf1, 0x99, 0x09, 0xd0, 0x36, 0x40, 0xf7, 0xb3, 0xc9, 0x07, 0x82, 0x53, 0x2f, 0x93, 0x72,
	0xfb, 0xb0, 0xf5, 0xa4, 0x52, 0x91, 0x52, 0x42, 0x26, 0x78, 0x01, 0x03, 0xae, 0xc3, 0xb5, 0x12,
	0xf1, 0x5a, 0xe7, 0x69, 0x64, 0xa3, 0x31, 0x9a, 0x9e, 0xb0, 0x0b, 0xfa, 0x2f, 0x83, 0xba, 0xab,
	0xc5, 0x52, 0xc4, 0xab, 0x3c, 0x8d, 0x7c, 0xe0, 0x3a, 0x34, 0x1a, 0x8f, 0xe0, 0xd8, 0xe4, 0x2b,
	0x90, 0x7d, 0x34, 0x46, 0xd3, 0x81, 0x0f, 0xe6, 0x68, 0x29, 0x62, 0x7c, 0x0e, 0x3d, 0xf3, 0x8b,
	0xdd, 0xa9, 0x2f, 0xbb, 0xbf, 0xaf, 0x27, 0xb7, 0xd0, 0x77, 0xef, 0xbc, 0x39, 0x63, 0x55, 0xca,
	0x86, 0x5e, 0xb0, 0xd9, 0x64, 0x91, 0x52, 0x75, 0x8d, 0xbe, 0xdf, 0x58, 0x3c, 0x84, 0x4e, 0x0b,
	0xae, 0xe4, 0xd5, 0x25, 0x40, 0x5b, 0x06, 0x03, 0x74, 0x2b, 0xcc, 0xcd, 0xf5, 0xd0, 0x6a, 0x34,
	0x63, 0x43, 0xe4, 0xde, 0x7f, 0x16, 0x04, 0x1d, 0x0a, 0x82, 0xbe, 0x0b, 0x82, 0xde, 0x4b, 0x62,
	0x1d, 0x4a, 0x62, 0x7d, 0x95, 0xc4, 0x7a, 0x64, 0xb1, 0xd0, 0xbb, 0x57, 0x4e, 0x43, 0xf9, 0xe2,
	0x98, 0xa2, 0xe1, 0x2e, 0x10, 0x49, 0x63, 0x9c, 0xb7, 0xbf, 0xfb, 0x56, 0xd3, 0x28, 0xde, 0xad,
	0xf7, 0x9d, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xb9, 0xc5, 0x76, 0x11, 0x82, 0x01, 0x00, 0x00,
}

func (m *ProofOfPossession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProofOfPossession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProofOfPossession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BtcSig) > 0 {
		i -= len(m.BtcSig)
		copy(dAtA[i:], m.BtcSig)
		i = encodeVarintPop(dAtA, i, uint64(len(m.BtcSig)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BabylonSig) > 0 {
		i -= len(m.BabylonSig)
		copy(dAtA[i:], m.BabylonSig)
		i = encodeVarintPop(dAtA, i, uint64(len(m.BabylonSig)))
		i--
		dAtA[i] = 0x12
	}
	if m.BtcSigType != 0 {
		i = encodeVarintPop(dAtA, i, uint64(m.BtcSigType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BIP322Sig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BIP322Sig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BIP322Sig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintPop(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPop(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPop(dAtA []byte, offset int, v uint64) int {
	offset -= sovPop(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProofOfPossession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BtcSigType != 0 {
		n += 1 + sovPop(uint64(m.BtcSigType))
	}
	l = len(m.BabylonSig)
	if l > 0 {
		n += 1 + l + sovPop(uint64(l))
	}
	l = len(m.BtcSig)
	if l > 0 {
		n += 1 + l + sovPop(uint64(l))
	}
	return n
}

func (m *BIP322Sig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPop(uint64(l))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovPop(uint64(l))
	}
	return n
}

func sovPop(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPop(x uint64) (n int) {
	return sovPop(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProofOfPossession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProofOfPossession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProofOfPossession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcSigType", wireType)
			}
			m.BtcSigType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BtcSigType |= BTCSigType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BabylonSig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPop
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BabylonSig = append(m.BabylonSig[:0], dAtA[iNdEx:postIndex]...)
			if m.BabylonSig == nil {
				m.BabylonSig = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcSig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPop
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcSig = append(m.BtcSig[:0], dAtA[iNdEx:postIndex]...)
			if m.BtcSig == nil {
				m.BtcSig = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BIP322Sig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BIP322Sig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BIP322Sig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPop
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPop(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPop
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPop
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPop
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPop
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPop        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPop          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPop = fmt.Errorf("proto: unexpected end of group")
)
