// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/btcstaking/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_babylonchain_babylon_types "github.com/babylonchain/babylon/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryBTCValidatorsRequest is the request type for the
// Query/BTCValidators RPC method.
type QueryBTCValidatorsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBTCValidatorsRequest) Reset()         { *m = QueryBTCValidatorsRequest{} }
func (m *QueryBTCValidatorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBTCValidatorsRequest) ProtoMessage()    {}
func (*QueryBTCValidatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{2}
}
func (m *QueryBTCValidatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBTCValidatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBTCValidatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBTCValidatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBTCValidatorsRequest.Merge(m, src)
}
func (m *QueryBTCValidatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBTCValidatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBTCValidatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBTCValidatorsRequest proto.InternalMessageInfo

func (m *QueryBTCValidatorsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBTCValidatorsResponse is the response type for the
// Query/BTCValidators RPC method.
type QueryBTCValidatorsResponse struct {
	// btc_validators contains all the BTC validators
	BtcValidators []*BTCValidator `protobuf:"bytes,1,rep,name=btc_validators,json=btcValidators,proto3" json:"btc_validators,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBTCValidatorsResponse) Reset()         { *m = QueryBTCValidatorsResponse{} }
func (m *QueryBTCValidatorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBTCValidatorsResponse) ProtoMessage()    {}
func (*QueryBTCValidatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{3}
}
func (m *QueryBTCValidatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBTCValidatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBTCValidatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBTCValidatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBTCValidatorsResponse.Merge(m, src)
}
func (m *QueryBTCValidatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBTCValidatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBTCValidatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBTCValidatorsResponse proto.InternalMessageInfo

func (m *QueryBTCValidatorsResponse) GetBtcValidators() []*BTCValidator {
	if m != nil {
		return m.BtcValidators
	}
	return nil
}

func (m *QueryBTCValidatorsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBTCValidatorsRequest requests information about a BTC validator
type QueryBTCValidatorRequest struct {
	// val_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the BTC validator that
	ValBtcPkHex string `protobuf:"bytes,1,opt,name=val_btc_pk_hex,json=valBtcPkHex,proto3" json:"val_btc_pk_hex,omitempty"`
}

func (m *QueryBTCValidatorRequest) Reset()         { *m = QueryBTCValidatorRequest{} }
func (m *QueryBTCValidatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBTCValidatorRequest) ProtoMessage()    {}
func (*QueryBTCValidatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{4}
}
func (m *QueryBTCValidatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBTCValidatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBTCValidatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBTCValidatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBTCValidatorRequest.Merge(m, src)
}
func (m *QueryBTCValidatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBTCValidatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBTCValidatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBTCValidatorRequest proto.InternalMessageInfo

func (m *QueryBTCValidatorRequest) GetValBtcPkHex() string {
	if m != nil {
		return m.ValBtcPkHex
	}
	return ""
}

// QueryBTCValidatorsResponse resoponse contains information about a BTC validator
type QueryBTCValidatorResponse struct {
	// btc_validator contains the BTC validator
	BtcValidator *BTCValidator `protobuf:"bytes,1,opt,name=btc_validator,json=btcValidator,proto3" json:"btc_validator,omitempty"`
}

func (m *QueryBTCValidatorResponse) Reset()         { *m = QueryBTCValidatorResponse{} }
func (m *QueryBTCValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBTCValidatorResponse) ProtoMessage()    {}
func (*QueryBTCValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{5}
}
func (m *QueryBTCValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBTCValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBTCValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBTCValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBTCValidatorResponse.Merge(m, src)
}
func (m *QueryBTCValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBTCValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBTCValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBTCValidatorResponse proto.InternalMessageInfo

func (m *QueryBTCValidatorResponse) GetBtcValidator() *BTCValidator {
	if m != nil {
		return m.BtcValidator
	}
	return nil
}

// QueryBTCDelegationsRequest is the request type for the
// Query/BTCDelegations RPC method.
type QueryBTCDelegationsRequest struct {
	// status is the queried status for BTC delegations
	Status BTCDelegationStatus `protobuf:"varint,1,opt,name=status,proto3,enum=babylon.btcstaking.v1.BTCDelegationStatus" json:"status,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBTCDelegationsRequest) Reset()         { *m = QueryBTCDelegationsRequest{} }
func (m *QueryBTCDelegationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBTCDelegationsRequest) ProtoMessage()    {}
func (*QueryBTCDelegationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{6}
}
func (m *QueryBTCDelegationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBTCDelegationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBTCDelegationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBTCDelegationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBTCDelegationsRequest.Merge(m, src)
}
func (m *QueryBTCDelegationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBTCDelegationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBTCDelegationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBTCDelegationsRequest proto.InternalMessageInfo

func (m *QueryBTCDelegationsRequest) GetStatus() BTCDelegationStatus {
	if m != nil {
		return m.Status
	}
	return BTCDelegationStatus_PENDING
}

func (m *QueryBTCDelegationsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBTCDelegationsResponse is the response type for the
// Query/BTCDelegations RPC method.
type QueryBTCDelegationsResponse struct {
	// btc_delegations contains all the queried BTC delegations under the given status
	BtcDelegations []*BTCDelegation `protobuf:"bytes,1,rep,name=btc_delegations,json=btcDelegations,proto3" json:"btc_delegations,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBTCDelegationsResponse) Reset()         { *m = QueryBTCDelegationsResponse{} }
func (m *QueryBTCDelegationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBTCDelegationsResponse) ProtoMessage()    {}
func (*QueryBTCDelegationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{7}
}
func (m *QueryBTCDelegationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBTCDelegationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBTCDelegationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBTCDelegationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBTCDelegationsResponse.Merge(m, src)
}
func (m *QueryBTCDelegationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBTCDelegationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBTCDelegationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBTCDelegationsResponse proto.InternalMessageInfo

func (m *QueryBTCDelegationsResponse) GetBtcDelegations() []*BTCDelegation {
	if m != nil {
		return m.BtcDelegations
	}
	return nil
}

func (m *QueryBTCDelegationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBTCValidatorPowerAtHeightRequest is the request type for the
// Query/BTCValidatorPowerAtHeight RPC method.
type QueryBTCValidatorPowerAtHeightRequest struct {
	// val_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the BTC validator that
	// this BTC delegation delegates to
	// the PK follows encoding in BIP-340 spec
	ValBtcPkHex string `protobuf:"bytes,1,opt,name=val_btc_pk_hex,json=valBtcPkHex,proto3" json:"val_btc_pk_hex,omitempty"`
	// height is used for querying the given validator's voting power at this height
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryBTCValidatorPowerAtHeightRequest) Reset()         { *m = QueryBTCValidatorPowerAtHeightRequest{} }
func (m *QueryBTCValidatorPowerAtHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBTCValidatorPowerAtHeightRequest) ProtoMessage()    {}
func (*QueryBTCValidatorPowerAtHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{8}
}
func (m *QueryBTCValidatorPowerAtHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBTCValidatorPowerAtHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBTCValidatorPowerAtHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBTCValidatorPowerAtHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBTCValidatorPowerAtHeightRequest.Merge(m, src)
}
func (m *QueryBTCValidatorPowerAtHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBTCValidatorPowerAtHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBTCValidatorPowerAtHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBTCValidatorPowerAtHeightRequest proto.InternalMessageInfo

func (m *QueryBTCValidatorPowerAtHeightRequest) GetValBtcPkHex() string {
	if m != nil {
		return m.ValBtcPkHex
	}
	return ""
}

func (m *QueryBTCValidatorPowerAtHeightRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// QueryBTCValidatorPowerAtHeightResponse is the response type for the
// Query/BTCValidatorPowerAtHeight RPC method.
type QueryBTCValidatorPowerAtHeightResponse struct {
	// voting_power is the voting power of the BTC validator
	VotingPower uint64 `protobuf:"varint,1,opt,name=voting_power,json=votingPower,proto3" json:"voting_power,omitempty"`
}

func (m *QueryBTCValidatorPowerAtHeightResponse) Reset() {
	*m = QueryBTCValidatorPowerAtHeightResponse{}
}
func (m *QueryBTCValidatorPowerAtHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBTCValidatorPowerAtHeightResponse) ProtoMessage()    {}
func (*QueryBTCValidatorPowerAtHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{9}
}
func (m *QueryBTCValidatorPowerAtHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBTCValidatorPowerAtHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBTCValidatorPowerAtHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBTCValidatorPowerAtHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBTCValidatorPowerAtHeightResponse.Merge(m, src)
}
func (m *QueryBTCValidatorPowerAtHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBTCValidatorPowerAtHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBTCValidatorPowerAtHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBTCValidatorPowerAtHeightResponse proto.InternalMessageInfo

func (m *QueryBTCValidatorPowerAtHeightResponse) GetVotingPower() uint64 {
	if m != nil {
		return m.VotingPower
	}
	return 0
}

// QueryBTCValidatorCurrentPowerRequest is the request type for the
// Query/BTCValidatorCurrentPower RPC method.
type QueryBTCValidatorCurrentPowerRequest struct {
	// val_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the BTC validator that
	// this BTC delegation delegates to
	// the PK follows encoding in BIP-340 spec
	ValBtcPkHex string `protobuf:"bytes,1,opt,name=val_btc_pk_hex,json=valBtcPkHex,proto3" json:"val_btc_pk_hex,omitempty"`
}

func (m *QueryBTCValidatorCurrentPowerRequest) Reset()         { *m = QueryBTCValidatorCurrentPowerRequest{} }
func (m *QueryBTCValidatorCurrentPowerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBTCValidatorCurrentPowerRequest) ProtoMessage()    {}
func (*QueryBTCValidatorCurrentPowerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{10}
}
func (m *QueryBTCValidatorCurrentPowerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBTCValidatorCurrentPowerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBTCValidatorCurrentPowerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBTCValidatorCurrentPowerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBTCValidatorCurrentPowerRequest.Merge(m, src)
}
func (m *QueryBTCValidatorCurrentPowerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBTCValidatorCurrentPowerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBTCValidatorCurrentPowerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBTCValidatorCurrentPowerRequest proto.InternalMessageInfo

func (m *QueryBTCValidatorCurrentPowerRequest) GetValBtcPkHex() string {
	if m != nil {
		return m.ValBtcPkHex
	}
	return ""
}

// QueryBTCValidatorCurrentPowerResponse is the response type for the
// Query/BTCValidatorCurrentPower RPC method.
type QueryBTCValidatorCurrentPowerResponse struct {
	// height is the current height
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// voting_power is the voting power of the BTC validator
	VotingPower uint64 `protobuf:"varint,2,opt,name=voting_power,json=votingPower,proto3" json:"voting_power,omitempty"`
}

func (m *QueryBTCValidatorCurrentPowerResponse) Reset()         { *m = QueryBTCValidatorCurrentPowerResponse{} }
func (m *QueryBTCValidatorCurrentPowerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBTCValidatorCurrentPowerResponse) ProtoMessage()    {}
func (*QueryBTCValidatorCurrentPowerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{11}
}
func (m *QueryBTCValidatorCurrentPowerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBTCValidatorCurrentPowerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBTCValidatorCurrentPowerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBTCValidatorCurrentPowerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBTCValidatorCurrentPowerResponse.Merge(m, src)
}
func (m *QueryBTCValidatorCurrentPowerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBTCValidatorCurrentPowerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBTCValidatorCurrentPowerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBTCValidatorCurrentPowerResponse proto.InternalMessageInfo

func (m *QueryBTCValidatorCurrentPowerResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *QueryBTCValidatorCurrentPowerResponse) GetVotingPower() uint64 {
	if m != nil {
		return m.VotingPower
	}
	return 0
}

// QueryActiveBTCValidatorsAtHeightRequest is the request type for the
// Query/ActiveBTCValidatorsAtHeight RPC method.
type QueryActiveBTCValidatorsAtHeightRequest struct {
	// height defines at which Babylon height to query the BTC validators info.
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryActiveBTCValidatorsAtHeightRequest) Reset() {
	*m = QueryActiveBTCValidatorsAtHeightRequest{}
}
func (m *QueryActiveBTCValidatorsAtHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryActiveBTCValidatorsAtHeightRequest) ProtoMessage()    {}
func (*QueryActiveBTCValidatorsAtHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{12}
}
func (m *QueryActiveBTCValidatorsAtHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveBTCValidatorsAtHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveBTCValidatorsAtHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveBTCValidatorsAtHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveBTCValidatorsAtHeightRequest.Merge(m, src)
}
func (m *QueryActiveBTCValidatorsAtHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveBTCValidatorsAtHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveBTCValidatorsAtHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveBTCValidatorsAtHeightRequest proto.InternalMessageInfo

func (m *QueryActiveBTCValidatorsAtHeightRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *QueryActiveBTCValidatorsAtHeightRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryActiveBTCValidatorsAtHeightResponse is the response type for the
// Query/ActiveBTCValidatorsAtHeight RPC method.
type QueryActiveBTCValidatorsAtHeightResponse struct {
	// btc_validators contains all the queried BTC validators.
	BtcValidators []*BTCValidatorWithMeta `protobuf:"bytes,1,rep,name=btc_validators,json=btcValidators,proto3" json:"btc_validators,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryActiveBTCValidatorsAtHeightResponse) Reset() {
	*m = QueryActiveBTCValidatorsAtHeightResponse{}
}
func (m *QueryActiveBTCValidatorsAtHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryActiveBTCValidatorsAtHeightResponse) ProtoMessage()    {}
func (*QueryActiveBTCValidatorsAtHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{13}
}
func (m *QueryActiveBTCValidatorsAtHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveBTCValidatorsAtHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveBTCValidatorsAtHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveBTCValidatorsAtHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveBTCValidatorsAtHeightResponse.Merge(m, src)
}
func (m *QueryActiveBTCValidatorsAtHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveBTCValidatorsAtHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveBTCValidatorsAtHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveBTCValidatorsAtHeightResponse proto.InternalMessageInfo

func (m *QueryActiveBTCValidatorsAtHeightResponse) GetBtcValidators() []*BTCValidatorWithMeta {
	if m != nil {
		return m.BtcValidators
	}
	return nil
}

func (m *QueryActiveBTCValidatorsAtHeightResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryActivatedHeightRequest is the request type for the Query/ActivatedHeight RPC method.
type QueryActivatedHeightRequest struct {
}

func (m *QueryActivatedHeightRequest) Reset()         { *m = QueryActivatedHeightRequest{} }
func (m *QueryActivatedHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryActivatedHeightRequest) ProtoMessage()    {}
func (*QueryActivatedHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{14}
}
func (m *QueryActivatedHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActivatedHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActivatedHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActivatedHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActivatedHeightRequest.Merge(m, src)
}
func (m *QueryActivatedHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryActivatedHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActivatedHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActivatedHeightRequest proto.InternalMessageInfo

// QueryActivatedHeightResponse is the response type for the Query/ActivatedHeight RPC method.
type QueryActivatedHeightResponse struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryActivatedHeightResponse) Reset()         { *m = QueryActivatedHeightResponse{} }
func (m *QueryActivatedHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryActivatedHeightResponse) ProtoMessage()    {}
func (*QueryActivatedHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{15}
}
func (m *QueryActivatedHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActivatedHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActivatedHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActivatedHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActivatedHeightResponse.Merge(m, src)
}
func (m *QueryActivatedHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryActivatedHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActivatedHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActivatedHeightResponse proto.InternalMessageInfo

func (m *QueryActivatedHeightResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// QueryBTCValidatorDelegationsRequest is the request type for the
// Query/BTCValidatorDelegations RPC method.
type QueryBTCValidatorDelegationsRequest struct {
	// val_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the BTC validator that
	// this BTC delegation delegates to
	// the PK follows encoding in BIP-340 spec
	ValBtcPkHex string `protobuf:"bytes,1,opt,name=val_btc_pk_hex,json=valBtcPkHex,proto3" json:"val_btc_pk_hex,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBTCValidatorDelegationsRequest) Reset()         { *m = QueryBTCValidatorDelegationsRequest{} }
func (m *QueryBTCValidatorDelegationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBTCValidatorDelegationsRequest) ProtoMessage()    {}
func (*QueryBTCValidatorDelegationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{16}
}
func (m *QueryBTCValidatorDelegationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBTCValidatorDelegationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBTCValidatorDelegationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBTCValidatorDelegationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBTCValidatorDelegationsRequest.Merge(m, src)
}
func (m *QueryBTCValidatorDelegationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBTCValidatorDelegationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBTCValidatorDelegationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBTCValidatorDelegationsRequest proto.InternalMessageInfo

func (m *QueryBTCValidatorDelegationsRequest) GetValBtcPkHex() string {
	if m != nil {
		return m.ValBtcPkHex
	}
	return ""
}

func (m *QueryBTCValidatorDelegationsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBTCValidatorDelegationsResponse is the response type for the
// Query/BTCValidatorDelegations RPC method.
type QueryBTCValidatorDelegationsResponse struct {
	// btc_delegator_delegations contains all the queried BTC delegations.
	BtcDelegatorDelegations []*BTCDelegatorDelegations `protobuf:"bytes,1,rep,name=btc_delegator_delegations,json=btcDelegatorDelegations,proto3" json:"btc_delegator_delegations,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBTCValidatorDelegationsResponse) Reset()         { *m = QueryBTCValidatorDelegationsResponse{} }
func (m *QueryBTCValidatorDelegationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBTCValidatorDelegationsResponse) ProtoMessage()    {}
func (*QueryBTCValidatorDelegationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{17}
}
func (m *QueryBTCValidatorDelegationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBTCValidatorDelegationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBTCValidatorDelegationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBTCValidatorDelegationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBTCValidatorDelegationsResponse.Merge(m, src)
}
func (m *QueryBTCValidatorDelegationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBTCValidatorDelegationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBTCValidatorDelegationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBTCValidatorDelegationsResponse proto.InternalMessageInfo

func (m *QueryBTCValidatorDelegationsResponse) GetBtcDelegatorDelegations() []*BTCDelegatorDelegations {
	if m != nil {
		return m.BtcDelegatorDelegations
	}
	return nil
}

func (m *QueryBTCValidatorDelegationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBTCDelegationRequest is the request type to retrieve a BTC delegation by
// staking tx hash
type QueryBTCDelegationRequest struct {
	// Hash of staking transaction in btc format
	StakingTxHashHex string `protobuf:"bytes,1,opt,name=staking_tx_hash_hex,json=stakingTxHashHex,proto3" json:"staking_tx_hash_hex,omitempty"`
}

func (m *QueryBTCDelegationRequest) Reset()         { *m = QueryBTCDelegationRequest{} }
func (m *QueryBTCDelegationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBTCDelegationRequest) ProtoMessage()    {}
func (*QueryBTCDelegationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{18}
}
func (m *QueryBTCDelegationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBTCDelegationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBTCDelegationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBTCDelegationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBTCDelegationRequest.Merge(m, src)
}
func (m *QueryBTCDelegationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBTCDelegationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBTCDelegationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBTCDelegationRequest proto.InternalMessageInfo

func (m *QueryBTCDelegationRequest) GetStakingTxHashHex() string {
	if m != nil {
		return m.StakingTxHashHex
	}
	return ""
}

// QueryBTCDelegationResponse is response type matching QueryBTCDelegationRequest
// and containing BTC delegation information
type QueryBTCDelegationResponse struct {
	// btc_pk is the Bitcoin secp256k1 PK of this BTC delegation
	// the PK follows encoding in BIP-340 spec
	BtcPk *github_com_babylonchain_babylon_types.BIP340PubKey `protobuf:"bytes,1,opt,name=btc_pk,json=btcPk,proto3,customtype=github.com/babylonchain/babylon/types.BIP340PubKey" json:"btc_pk,omitempty"`
	// val_btc_pk_list is the list of BIP-340 PKs of the BTC validators that
	// this BTC delegation delegates to
	ValBtcPkList []github_com_babylonchain_babylon_types.BIP340PubKey `protobuf:"bytes,2,rep,name=val_btc_pk_list,json=valBtcPkList,proto3,customtype=github.com/babylonchain/babylon/types.BIP340PubKey" json:"val_btc_pk_list,omitempty"`
	// start_height is the start BTC height of the BTC delegation
	// it is the start BTC height of the timelock
	StartHeight uint64 `protobuf:"varint,3,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	// end_height is the end height of the BTC delegation
	// it is the end BTC height of the timelock - w
	EndHeight uint64 `protobuf:"varint,4,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
	// total_sat is the total amount of BTC stakes in this delegation
	// quantified in satoshi
	TotalSat uint64 `protobuf:"varint,5,opt,name=total_sat,json=totalSat,proto3" json:"total_sat,omitempty"`
	// staking_tx_hex is the hex string of staking tx
	StakingTxHex string `protobuf:"bytes,6,opt,name=staking_tx_hex,json=stakingTxHex,proto3" json:"staking_tx_hex,omitempty"`
	// whether this delegation is active
	Active bool `protobuf:"varint,7,opt,name=active,proto3" json:"active,omitempty"`
	// undelegation_info is the undelegation info of this delegation. It is nil
	// if it is not undelegating
	UndelegationInfo *BTCUndelegationInfo `protobuf:"bytes,8,opt,name=undelegation_info,json=undelegationInfo,proto3" json:"undelegation_info,omitempty"`
}

func (m *QueryBTCDelegationResponse) Reset()         { *m = QueryBTCDelegationResponse{} }
func (m *QueryBTCDelegationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBTCDelegationResponse) ProtoMessage()    {}
func (*QueryBTCDelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74d49d26f7429697, []int{19}
}
func (m *QueryBTCDelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBTCDelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBTCDelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBTCDelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBTCDelegationResponse.Merge(m, src)
}
func (m *QueryBTCDelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBTCDelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBTCDelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBTCDelegationResponse proto.InternalMessageInfo

func (m *QueryBTCDelegationResponse) GetStartHeight() uint64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *QueryBTCDelegationResponse) GetEndHeight() uint64 {
	if m != nil {
		return m.EndHeight
	}
	return 0
}

func (m *QueryBTCDelegationResponse) GetTotalSat() uint64 {
	if m != nil {
		return m.TotalSat
	}
	return 0
}

func (m *QueryBTCDelegationResponse) GetStakingTxHex() string {
	if m != nil {
		return m.StakingTxHex
	}
	return ""
}

func (m *QueryBTCDelegationResponse) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *QueryBTCDelegationResponse) GetUndelegationInfo() *BTCUndelegationInfo {
	if m != nil {
		return m.UndelegationInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "babylon.btcstaking.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "babylon.btcstaking.v1.QueryParamsResponse")
	proto.RegisterType((*QueryBTCValidatorsRequest)(nil), "babylon.btcstaking.v1.QueryBTCValidatorsRequest")
	proto.RegisterType((*QueryBTCValidatorsResponse)(nil), "babylon.btcstaking.v1.QueryBTCValidatorsResponse")
	proto.RegisterType((*QueryBTCValidatorRequest)(nil), "babylon.btcstaking.v1.QueryBTCValidatorRequest")
	proto.RegisterType((*QueryBTCValidatorResponse)(nil), "babylon.btcstaking.v1.QueryBTCValidatorResponse")
	proto.RegisterType((*QueryBTCDelegationsRequest)(nil), "babylon.btcstaking.v1.QueryBTCDelegationsRequest")
	proto.RegisterType((*QueryBTCDelegationsResponse)(nil), "babylon.btcstaking.v1.QueryBTCDelegationsResponse")
	proto.RegisterType((*QueryBTCValidatorPowerAtHeightRequest)(nil), "babylon.btcstaking.v1.QueryBTCValidatorPowerAtHeightRequest")
	proto.RegisterType((*QueryBTCValidatorPowerAtHeightResponse)(nil), "babylon.btcstaking.v1.QueryBTCValidatorPowerAtHeightResponse")
	proto.RegisterType((*QueryBTCValidatorCurrentPowerRequest)(nil), "babylon.btcstaking.v1.QueryBTCValidatorCurrentPowerRequest")
	proto.RegisterType((*QueryBTCValidatorCurrentPowerResponse)(nil), "babylon.btcstaking.v1.QueryBTCValidatorCurrentPowerResponse")
	proto.RegisterType((*QueryActiveBTCValidatorsAtHeightRequest)(nil), "babylon.btcstaking.v1.QueryActiveBTCValidatorsAtHeightRequest")
	proto.RegisterType((*QueryActiveBTCValidatorsAtHeightResponse)(nil), "babylon.btcstaking.v1.QueryActiveBTCValidatorsAtHeightResponse")
	proto.RegisterType((*QueryActivatedHeightRequest)(nil), "babylon.btcstaking.v1.QueryActivatedHeightRequest")
	proto.RegisterType((*QueryActivatedHeightResponse)(nil), "babylon.btcstaking.v1.QueryActivatedHeightResponse")
	proto.RegisterType((*QueryBTCValidatorDelegationsRequest)(nil), "babylon.btcstaking.v1.QueryBTCValidatorDelegationsRequest")
	proto.RegisterType((*QueryBTCValidatorDelegationsResponse)(nil), "babylon.btcstaking.v1.QueryBTCValidatorDelegationsResponse")
	proto.RegisterType((*QueryBTCDelegationRequest)(nil), "babylon.btcstaking.v1.QueryBTCDelegationRequest")
	proto.RegisterType((*QueryBTCDelegationResponse)(nil), "babylon.btcstaking.v1.QueryBTCDelegationResponse")
}

func init() { proto.RegisterFile("babylon/btcstaking/v1/query.proto", fileDescriptor_74d49d26f7429697) }

var fileDescriptor_74d49d26f7429697 = []byte{
	// 1246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0x24, 0xa9, 0x69, 0x5f, 0x9c, 0xa4, 0x4c, 0x0b, 0x75, 0x36, 0x8d, 0x93, 0x6e, 0x7e,
	0x36, 0xa8, 0xbb, 0xb1, 0x83, 0x72, 0x20, 0xa1, 0xa5, 0x6e, 0xa0, 0x69, 0xd2, 0x48, 0x66, 0x5b,
	0xa8, 0x84, 0x84, 0xac, 0x59, 0x67, 0xba, 0x5e, 0xe2, 0xec, 0xba, 0xde, 0xb1, 0x71, 0x54, 0xe5,
	0xc2, 0x01, 0x09, 0x71, 0x41, 0xf0, 0x27, 0x70, 0x00, 0x89, 0x13, 0x07, 0x2e, 0x70, 0xe1, 0x46,
	0x8f, 0x95, 0x90, 0x10, 0xa2, 0x52, 0x84, 0x12, 0x24, 0xfe, 0x0d, 0xe4, 0xd9, 0x71, 0x76, 0x37,
	0x5e, 0xdb, 0x6b, 0x37, 0xdc, 0xe2, 0x9d, 0xf7, 0xe3, 0xfb, 0xde, 0x7c, 0xfb, 0xed, 0x53, 0xe0,
	0x9a, 0x4e, 0xf4, 0xfd, 0xa2, 0x6d, 0xa9, 0x3a, 0xcb, 0x3b, 0x8c, 0xec, 0x9a, 0x96, 0xa1, 0x56,
	0x53, 0xea, 0x93, 0x0a, 0x2d, 0xef, 0x2b, 0xa5, 0xb2, 0xcd, 0x6c, 0xfc, 0x9a, 0x08, 0x51, 0xbc,
	0x10, 0xa5, 0x9a, 0x92, 0x2e, 0x1b, 0xb6, 0x61, 0xf3, 0x08, 0xb5, 0xfe, 0x97, 0x1b, 0x2c, 0x5d,
	0x35, 0x6c, 0xdb, 0x28, 0x52, 0x95, 0x94, 0x4c, 0x95, 0x58, 0x96, 0xcd, 0x08, 0x33, 0x6d, 0xcb,
	0x11, 0xa7, 0x8b, 0x79, 0xdb, 0xd9, 0xb3, 0x1d, 0x55, 0x27, 0x0e, 0x75, 0x7b, 0xa8, 0xd5, 0x94,
	0x4e, 0x19, 0x49, 0xa9, 0x25, 0x62, 0x98, 0x16, 0x0f, 0x16, 0xb1, 0x72, 0x38, 0xb2, 0x12, 0x29,
	0x93, 0xbd, 0x46, 0xbd, 0xb9, 0xf0, 0x18, 0x1f, 0x50, 0x1e, 0x27, 0x5f, 0x06, 0xfc, 0x7e, 0xbd,
	0x5b, 0x96, 0x27, 0x6b, 0xf4, 0x49, 0x85, 0x3a, 0x4c, 0xd6, 0xe0, 0x52, 0xe0, 0xa9, 0x53, 0xb2,
	0x2d, 0x87, 0xe2, 0x55, 0x88, 0xb9, 0x4d, 0x12, 0x68, 0x0a, 0x2d, 0x0c, 0xa5, 0x27, 0x94, 0xd0,
	0x01, 0x28, 0x6e, 0x5a, 0x66, 0xf0, 0xd9, 0xe1, 0x64, 0x9f, 0x26, 0x52, 0xe4, 0x3c, 0x8c, 0xf1,
	0x9a, 0x99, 0x87, 0x77, 0x3e, 0x24, 0x45, 0x73, 0x87, 0x30, 0xbb, 0xdc, 0x68, 0x88, 0xdf, 0x03,
	0xf0, 0x68, 0x8a, 0xea, 0x73, 0x8a, 0x3b, 0x13, 0xa5, 0x3e, 0x13, 0xc5, 0x9d, 0xbb, 0x98, 0x89,
	0x92, 0x25, 0x06, 0x15, 0xb9, 0x9a, 0x2f, 0x53, 0xfe, 0x11, 0x81, 0x14, 0xd6, 0x45, 0x10, 0xd8,
	0x84, 0x11, 0x9d, 0xe5, 0x73, 0xd5, 0x93, 0x93, 0x04, 0x9a, 0x1a, 0x58, 0x18, 0x4a, 0x4f, 0xb7,
	0x20, 0xe2, 0xaf, 0xa2, 0x0d, 0xeb, 0x2c, 0xef, 0xd5, 0xc4, 0x77, 0x03, 0x90, 0xfb, 0x39, 0xe4,
	0xf9, 0x8e, 0x90, 0x5d, 0x20, 0x01, 0xcc, 0xb7, 0x20, 0xd1, 0x04, 0xb9, 0x31, 0x97, 0x69, 0x18,
	0xa9, 0x92, 0x62, 0xae, 0x0e, 0xba, 0xb4, 0x9b, 0x2b, 0xd0, 0x1a, 0x9f, 0xcd, 0x05, 0x6d, 0xa8,
	0x4a, 0x8a, 0x19, 0x96, 0xcf, 0xee, 0x6e, 0xd0, 0x9a, 0x4c, 0x43, 0x26, 0x7b, 0x42, 0x79, 0x03,
	0x86, 0x03, 0x94, 0xc5, 0x70, 0x23, 0x31, 0x8e, 0xfb, 0x19, 0xcb, 0xdf, 0xfb, 0x66, 0xbb, 0x4e,
	0x8b, 0xd4, 0x70, 0x05, 0xdc, 0x80, 0x9a, 0x81, 0x98, 0xc3, 0x08, 0xab, 0xb8, 0xe2, 0x18, 0x49,
	0x2f, 0xb6, 0xee, 0xe0, 0x65, 0x3f, 0xe0, 0x19, 0x9a, 0xc8, 0x3c, 0x25, 0x83, 0xfe, 0x9e, 0x65,
	0xf0, 0x13, 0x82, 0xf1, 0x50, 0xa8, 0x62, 0x28, 0xdb, 0x30, 0x5a, 0x1f, 0xca, 0x8e, 0x77, 0x24,
	0x84, 0x30, 0x13, 0x05, 0xb4, 0x56, 0x17, 0x91, 0xaf, 0xec, 0xd9, 0x49, 0x61, 0x07, 0x66, 0x9b,
	0x6e, 0x32, 0x6b, 0x7f, 0x4a, 0xcb, 0xb7, 0xd9, 0x06, 0x35, 0x8d, 0x02, 0xeb, 0x46, 0x17, 0xf8,
	0x75, 0x88, 0x15, 0x78, 0x16, 0x87, 0x34, 0xa8, 0x89, 0x5f, 0xf2, 0x16, 0xcc, 0x75, 0xea, 0x22,
	0xe6, 0x74, 0x0d, 0xe2, 0x55, 0x9b, 0x99, 0x96, 0x91, 0x2b, 0xd5, 0xcf, 0x79, 0x93, 0x41, 0x6d,
	0xc8, 0x7d, 0xc6, 0x53, 0xe4, 0x2d, 0x98, 0x69, 0x2a, 0x76, 0xa7, 0x52, 0x2e, 0x53, 0x8b, 0xf1,
	0x80, 0xae, 0x94, 0xac, 0x87, 0xf0, 0x0f, 0x16, 0x13, 0xc0, 0x3c, 0x6a, 0xc8, 0x4f, 0xad, 0x09,
	0x70, 0x7f, 0x33, 0xe0, 0x2f, 0x10, 0xcc, 0xf3, 0x26, 0xb7, 0xf3, 0xcc, 0xac, 0xd2, 0x80, 0x51,
	0x9c, 0x1e, 0x73, 0xab, 0x36, 0x67, 0xa5, 0xd3, 0xdf, 0x10, 0x2c, 0x74, 0xc6, 0x22, 0x38, 0x6b,
	0x2d, 0xcc, 0xeb, 0x8d, 0x08, 0xaf, 0xf2, 0x23, 0x93, 0x15, 0xb6, 0x29, 0x23, 0xff, 0x9b, 0x89,
	0x4d, 0x88, 0x17, 0x8e, 0x13, 0x21, 0x8c, 0xee, 0x04, 0x06, 0x29, 0xaf, 0xc0, 0xd5, 0xf0, 0xe3,
	0xf6, 0xf7, 0x29, 0x7f, 0x8d, 0x60, 0xba, 0x49, 0x11, 0x21, 0xe6, 0x13, 0xe9, 0x7d, 0x38, 0xab,
	0x5b, 0x7b, 0x81, 0x42, 0x34, 0x1f, 0x66, 0x33, 0x9f, 0xc0, 0x98, 0xcf, 0x66, 0xec, 0x72, 0x88,
	0xe1, 0x28, 0x1d, 0x0d, 0x27, 0x58, 0xfa, 0x8a, 0x67, 0x3d, 0x81, 0x83, 0xb3, 0xbb, 0xc9, 0x4d,
	0xef, 0x6b, 0xe2, 0xb3, 0x3c, 0x31, 0xe7, 0x1b, 0x70, 0x49, 0x80, 0xcc, 0xb1, 0x5a, 0xae, 0x40,
	0x9c, 0x82, 0x6f, 0xd8, 0x17, 0xc5, 0xd1, 0xc3, 0xda, 0x06, 0x71, 0x0a, 0xf5, 0xf7, 0xf9, 0xd7,
	0x81, 0xb0, 0x4f, 0x86, 0xcf, 0x86, 0x63, 0xee, 0x8d, 0xf1, 0x02, 0xf1, 0xcc, 0xca, 0x5f, 0x87,
	0x93, 0x69, 0xc3, 0x64, 0x85, 0x8a, 0xae, 0xe4, 0xed, 0x3d, 0x55, 0x8c, 0x26, 0x5f, 0x20, 0xa6,
	0xd5, 0xf8, 0xa1, 0xb2, 0xfd, 0x12, 0x75, 0x94, 0xcc, 0xbd, 0xec, 0xf2, 0x9b, 0x4b, 0xd9, 0x8a,
	0xbe, 0x45, 0xf7, 0xb5, 0x73, 0x7a, 0xfd, 0x8a, 0xf1, 0xc7, 0x30, 0xea, 0x13, 0x41, 0xd1, 0x74,
	0xea, 0xc6, 0x37, 0xf0, 0x12, 0x75, 0xe3, 0x0d, 0xf5, 0xdc, 0x37, 0x1d, 0xee, 0x2d, 0x0e, 0x23,
	0x65, 0x96, 0x13, 0x4a, 0x1d, 0x70, 0xbd, 0x85, 0x3f, 0x73, 0xe5, 0x8c, 0x27, 0x00, 0xa8, 0xb5,
	0xd3, 0x08, 0x18, 0xe4, 0x01, 0x17, 0xa8, 0x25, 0xd4, 0x8e, 0xc7, 0xe1, 0x02, 0xb3, 0x19, 0x29,
	0xe6, 0x1c, 0xc2, 0x12, 0xe7, 0xf8, 0xe9, 0x79, 0xfe, 0xe0, 0x01, 0x61, 0x78, 0x06, 0x46, 0xfc,
	0xa3, 0xa5, 0xb5, 0x44, 0x8c, 0x4f, 0x35, 0xee, 0x4d, 0xd5, 0xf5, 0x74, 0xc2, 0xbd, 0x22, 0xf1,
	0xca, 0x14, 0x5a, 0x38, 0xaf, 0x89, 0x5f, 0xf8, 0x11, 0xbc, 0x5a, 0xb1, 0x3c, 0x79, 0xe5, 0x4c,
	0xeb, 0xb1, 0x9d, 0x38, 0xcf, 0x55, 0xd0, 0xe6, 0x43, 0xfc, 0x81, 0x2f, 0xe5, 0x9e, 0xf5, 0xd8,
	0xd6, 0x2e, 0x56, 0x4e, 0x3d, 0x49, 0x7f, 0x39, 0x0a, 0xe7, 0xf8, 0x15, 0xe2, 0xcf, 0x11, 0xc4,
	0xdc, 0xcd, 0x0e, 0x5f, 0x6f, 0x51, 0xb2, 0x79, 0x95, 0x94, 0x16, 0xa3, 0x84, 0xba, 0x7a, 0x90,
	0x67, 0x3f, 0xfb, 0xfd, 0x9f, 0x6f, 0xfa, 0x27, 0xf1, 0x84, 0xda, 0x6e, 0xc3, 0xc5, 0xdf, 0x22,
	0x18, 0x0e, 0x58, 0x25, 0x5e, 0x6a, 0xd7, 0x24, 0x6c, 0xe1, 0x94, 0x52, 0x5d, 0x64, 0x08, 0x74,
	0x37, 0x38, 0xba, 0x79, 0x3c, 0xab, 0xb6, 0xdc, 0xad, 0x7d, 0xe6, 0x8c, 0x7f, 0x41, 0x10, 0xf7,
	0x17, 0xc2, 0x6a, 0xd4, 0x96, 0x0d, 0x8c, 0x4b, 0xd1, 0x13, 0x04, 0xc4, 0x0d, 0x0e, 0x31, 0x83,
	0xdf, 0x89, 0x04, 0x51, 0x7d, 0x1a, 0xf4, 0xcc, 0x03, 0xf5, 0xe4, 0x0c, 0x7f, 0x87, 0x60, 0x24,
	0xb8, 0x3c, 0xe1, 0x4e, 0x23, 0x6b, 0xb6, 0x65, 0x29, 0xdd, 0x4d, 0x8a, 0xe0, 0xa0, 0x70, 0x0e,
	0x0b, 0x78, 0xae, 0x0d, 0x07, 0x9f, 0x8f, 0xe2, 0x3f, 0x10, 0x8c, 0xb7, 0xf9, 0x7c, 0xe2, 0x9b,
	0xed, 0x30, 0x74, 0xde, 0x01, 0xa4, 0x5b, 0x3d, 0xe7, 0x0b, 0x42, 0x2b, 0x9c, 0xd0, 0x12, 0x56,
	0x22, 0x5e, 0x8a, 0xeb, 0x1e, 0x07, 0xf8, 0x5f, 0x04, 0x63, 0x2d, 0x57, 0x34, 0xbc, 0x16, 0x55,
	0x1c, 0x61, 0xfb, 0xa3, 0xf4, 0x76, 0x8f, 0xd9, 0x82, 0xd2, 0x36, 0xa7, 0x74, 0x17, 0xbf, 0xdb,
	0xa3, 0xce, 0xf8, 0x72, 0xe6, 0x31, 0x7d, 0x81, 0x20, 0xd1, 0x6a, 0xe5, 0xc3, 0xab, 0x51, 0xa1,
	0x86, 0x6c, 0x9d, 0xd2, 0x5a, 0x6f, 0xc9, 0x82, 0xe6, 0x3a, 0xa7, 0x79, 0x13, 0xaf, 0xbd, 0x0c,
	0x4d, 0xfc, 0x03, 0x82, 0xd1, 0x53, 0x7b, 0x0f, 0x4e, 0x77, 0x14, 0x55, 0xd3, 0x0e, 0x25, 0x2d,
	0x77, 0x95, 0x23, 0x28, 0xa8, 0x9c, 0xc2, 0x75, 0x3c, 0xdf, 0x82, 0x02, 0x69, 0xe4, 0x89, 0x8f,
	0x16, 0x3e, 0x44, 0x70, 0xa5, 0xc5, 0x5e, 0x83, 0xdf, 0x8a, 0x3a, 0xcd, 0x10, 0x2b, 0x58, 0xed,
	0x29, 0x57, 0xb0, 0xd8, 0xe4, 0x2c, 0xd6, 0x71, 0xa6, 0xc7, 0x8b, 0xf0, 0xfb, 0xc5, 0xcf, 0xee,
	0xd7, 0xc3, 0x6b, 0xd3, 0xf1, 0xeb, 0xd1, 0xb4, 0x06, 0x49, 0xa9, 0x2e, 0x32, 0xba, 0xd0, 0x92,
	0x0f, 0xa6, 0xfa, 0x34, 0x64, 0xcf, 0x3a, 0xc8, 0xdc, 0x7f, 0x76, 0x94, 0x44, 0xcf, 0x8f, 0x92,
	0xe8, 0xef, 0xa3, 0x24, 0xfa, 0xea, 0x38, 0xd9, 0xf7, 0xfc, 0x38, 0xd9, 0xf7, 0xe7, 0x71, 0xb2,
	0xef, 0xa3, 0x8e, 0xfb, 0x4d, 0xcd, 0xdf, 0x90, 0x2f, 0x3b, 0x7a, 0x8c, 0xff, 0x0f, 0x68, 0xf9,
	0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3d, 0x99, 0x87, 0xd2, 0xeb, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// BTCValidators queries all BTC validators
	BTCValidators(ctx context.Context, in *QueryBTCValidatorsRequest, opts ...grpc.CallOption) (*QueryBTCValidatorsResponse, error)
	// BTCValidator info about one validator
	BTCValidator(ctx context.Context, in *QueryBTCValidatorRequest, opts ...grpc.CallOption) (*QueryBTCValidatorResponse, error)
	// BTCDelegations queries all BTC delegations under a given status
	BTCDelegations(ctx context.Context, in *QueryBTCDelegationsRequest, opts ...grpc.CallOption) (*QueryBTCDelegationsResponse, error)
	// ActiveBTCValidatorsAtHeight queries BTC validators with non zero voting power at given height.
	ActiveBTCValidatorsAtHeight(ctx context.Context, in *QueryActiveBTCValidatorsAtHeightRequest, opts ...grpc.CallOption) (*QueryActiveBTCValidatorsAtHeightResponse, error)
	// BTCValidatorPowerAtHeight queries the voting power of a BTC validator at a given height
	BTCValidatorPowerAtHeight(ctx context.Context, in *QueryBTCValidatorPowerAtHeightRequest, opts ...grpc.CallOption) (*QueryBTCValidatorPowerAtHeightResponse, error)
	// BTCValidatorCurrentPower queries the voting power of a BTC validator at the current height
	BTCValidatorCurrentPower(ctx context.Context, in *QueryBTCValidatorCurrentPowerRequest, opts ...grpc.CallOption) (*QueryBTCValidatorCurrentPowerResponse, error)
	// ActivatedHeight queries the height when BTC staking protocol is activated, i.e., the first height when
	// there exists 1 BTC validator with voting power
	ActivatedHeight(ctx context.Context, in *QueryActivatedHeightRequest, opts ...grpc.CallOption) (*QueryActivatedHeightResponse, error)
	// BTCValidatorDelegations queries all BTC delegations of the given BTC validator
	BTCValidatorDelegations(ctx context.Context, in *QueryBTCValidatorDelegationsRequest, opts ...grpc.CallOption) (*QueryBTCValidatorDelegationsResponse, error)
	// BTCDelegation retrieves delegation by corresponding staking tx hash
	BTCDelegation(ctx context.Context, in *QueryBTCDelegationRequest, opts ...grpc.CallOption) (*QueryBTCDelegationResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstaking.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BTCValidators(ctx context.Context, in *QueryBTCValidatorsRequest, opts ...grpc.CallOption) (*QueryBTCValidatorsResponse, error) {
	out := new(QueryBTCValidatorsResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstaking.v1.Query/BTCValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BTCValidator(ctx context.Context, in *QueryBTCValidatorRequest, opts ...grpc.CallOption) (*QueryBTCValidatorResponse, error) {
	out := new(QueryBTCValidatorResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstaking.v1.Query/BTCValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BTCDelegations(ctx context.Context, in *QueryBTCDelegationsRequest, opts ...grpc.CallOption) (*QueryBTCDelegationsResponse, error) {
	out := new(QueryBTCDelegationsResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstaking.v1.Query/BTCDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActiveBTCValidatorsAtHeight(ctx context.Context, in *QueryActiveBTCValidatorsAtHeightRequest, opts ...grpc.CallOption) (*QueryActiveBTCValidatorsAtHeightResponse, error) {
	out := new(QueryActiveBTCValidatorsAtHeightResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstaking.v1.Query/ActiveBTCValidatorsAtHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BTCValidatorPowerAtHeight(ctx context.Context, in *QueryBTCValidatorPowerAtHeightRequest, opts ...grpc.CallOption) (*QueryBTCValidatorPowerAtHeightResponse, error) {
	out := new(QueryBTCValidatorPowerAtHeightResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstaking.v1.Query/BTCValidatorPowerAtHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BTCValidatorCurrentPower(ctx context.Context, in *QueryBTCValidatorCurrentPowerRequest, opts ...grpc.CallOption) (*QueryBTCValidatorCurrentPowerResponse, error) {
	out := new(QueryBTCValidatorCurrentPowerResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstaking.v1.Query/BTCValidatorCurrentPower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActivatedHeight(ctx context.Context, in *QueryActivatedHeightRequest, opts ...grpc.CallOption) (*QueryActivatedHeightResponse, error) {
	out := new(QueryActivatedHeightResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstaking.v1.Query/ActivatedHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BTCValidatorDelegations(ctx context.Context, in *QueryBTCValidatorDelegationsRequest, opts ...grpc.CallOption) (*QueryBTCValidatorDelegationsResponse, error) {
	out := new(QueryBTCValidatorDelegationsResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstaking.v1.Query/BTCValidatorDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BTCDelegation(ctx context.Context, in *QueryBTCDelegationRequest, opts ...grpc.CallOption) (*QueryBTCDelegationResponse, error) {
	out := new(QueryBTCDelegationResponse)
	err := c.cc.Invoke(ctx, "/babylon.btcstaking.v1.Query/BTCDelegation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// BTCValidators queries all BTC validators
	BTCValidators(context.Context, *QueryBTCValidatorsRequest) (*QueryBTCValidatorsResponse, error)
	// BTCValidator info about one validator
	BTCValidator(context.Context, *QueryBTCValidatorRequest) (*QueryBTCValidatorResponse, error)
	// BTCDelegations queries all BTC delegations under a given status
	BTCDelegations(context.Context, *QueryBTCDelegationsRequest) (*QueryBTCDelegationsResponse, error)
	// ActiveBTCValidatorsAtHeight queries BTC validators with non zero voting power at given height.
	ActiveBTCValidatorsAtHeight(context.Context, *QueryActiveBTCValidatorsAtHeightRequest) (*QueryActiveBTCValidatorsAtHeightResponse, error)
	// BTCValidatorPowerAtHeight queries the voting power of a BTC validator at a given height
	BTCValidatorPowerAtHeight(context.Context, *QueryBTCValidatorPowerAtHeightRequest) (*QueryBTCValidatorPowerAtHeightResponse, error)
	// BTCValidatorCurrentPower queries the voting power of a BTC validator at the current height
	BTCValidatorCurrentPower(context.Context, *QueryBTCValidatorCurrentPowerRequest) (*QueryBTCValidatorCurrentPowerResponse, error)
	// ActivatedHeight queries the height when BTC staking protocol is activated, i.e., the first height when
	// there exists 1 BTC validator with voting power
	ActivatedHeight(context.Context, *QueryActivatedHeightRequest) (*QueryActivatedHeightResponse, error)
	// BTCValidatorDelegations queries all BTC delegations of the given BTC validator
	BTCValidatorDelegations(context.Context, *QueryBTCValidatorDelegationsRequest) (*QueryBTCValidatorDelegationsResponse, error)
	// BTCDelegation retrieves delegation by corresponding staking tx hash
	BTCDelegation(context.Context, *QueryBTCDelegationRequest) (*QueryBTCDelegationResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) BTCValidators(ctx context.Context, req *QueryBTCValidatorsRequest) (*QueryBTCValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BTCValidators not implemented")
}
func (*UnimplementedQueryServer) BTCValidator(ctx context.Context, req *QueryBTCValidatorRequest) (*QueryBTCValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BTCValidator not implemented")
}
func (*UnimplementedQueryServer) BTCDelegations(ctx context.Context, req *QueryBTCDelegationsRequest) (*QueryBTCDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BTCDelegations not implemented")
}
func (*UnimplementedQueryServer) ActiveBTCValidatorsAtHeight(ctx context.Context, req *QueryActiveBTCValidatorsAtHeightRequest) (*QueryActiveBTCValidatorsAtHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveBTCValidatorsAtHeight not implemented")
}
func (*UnimplementedQueryServer) BTCValidatorPowerAtHeight(ctx context.Context, req *QueryBTCValidatorPowerAtHeightRequest) (*QueryBTCValidatorPowerAtHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BTCValidatorPowerAtHeight not implemented")
}
func (*UnimplementedQueryServer) BTCValidatorCurrentPower(ctx context.Context, req *QueryBTCValidatorCurrentPowerRequest) (*QueryBTCValidatorCurrentPowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BTCValidatorCurrentPower not implemented")
}
func (*UnimplementedQueryServer) ActivatedHeight(ctx context.Context, req *QueryActivatedHeightRequest) (*QueryActivatedHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivatedHeight not implemented")
}
func (*UnimplementedQueryServer) BTCValidatorDelegations(ctx context.Context, req *QueryBTCValidatorDelegationsRequest) (*QueryBTCValidatorDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BTCValidatorDelegations not implemented")
}
func (*UnimplementedQueryServer) BTCDelegation(ctx context.Context, req *QueryBTCDelegationRequest) (*QueryBTCDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BTCDelegation not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstaking.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BTCValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBTCValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BTCValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstaking.v1.Query/BTCValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BTCValidators(ctx, req.(*QueryBTCValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BTCValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBTCValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BTCValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstaking.v1.Query/BTCValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BTCValidator(ctx, req.(*QueryBTCValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BTCDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBTCDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BTCDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstaking.v1.Query/BTCDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BTCDelegations(ctx, req.(*QueryBTCDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActiveBTCValidatorsAtHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryActiveBTCValidatorsAtHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActiveBTCValidatorsAtHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstaking.v1.Query/ActiveBTCValidatorsAtHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActiveBTCValidatorsAtHeight(ctx, req.(*QueryActiveBTCValidatorsAtHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BTCValidatorPowerAtHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBTCValidatorPowerAtHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BTCValidatorPowerAtHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstaking.v1.Query/BTCValidatorPowerAtHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BTCValidatorPowerAtHeight(ctx, req.(*QueryBTCValidatorPowerAtHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BTCValidatorCurrentPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBTCValidatorCurrentPowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BTCValidatorCurrentPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstaking.v1.Query/BTCValidatorCurrentPower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BTCValidatorCurrentPower(ctx, req.(*QueryBTCValidatorCurrentPowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActivatedHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryActivatedHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActivatedHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstaking.v1.Query/ActivatedHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActivatedHeight(ctx, req.(*QueryActivatedHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BTCValidatorDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBTCValidatorDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BTCValidatorDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstaking.v1.Query/BTCValidatorDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BTCValidatorDelegations(ctx, req.(*QueryBTCValidatorDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BTCDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBTCDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BTCDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/babylon.btcstaking.v1.Query/BTCDelegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BTCDelegation(ctx, req.(*QueryBTCDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "babylon.btcstaking.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "BTCValidators",
			Handler:    _Query_BTCValidators_Handler,
		},
		{
			MethodName: "BTCValidator",
			Handler:    _Query_BTCValidator_Handler,
		},
		{
			MethodName: "BTCDelegations",
			Handler:    _Query_BTCDelegations_Handler,
		},
		{
			MethodName: "ActiveBTCValidatorsAtHeight",
			Handler:    _Query_ActiveBTCValidatorsAtHeight_Handler,
		},
		{
			MethodName: "BTCValidatorPowerAtHeight",
			Handler:    _Query_BTCValidatorPowerAtHeight_Handler,
		},
		{
			MethodName: "BTCValidatorCurrentPower",
			Handler:    _Query_BTCValidatorCurrentPower_Handler,
		},
		{
			MethodName: "ActivatedHeight",
			Handler:    _Query_ActivatedHeight_Handler,
		},
		{
			MethodName: "BTCValidatorDelegations",
			Handler:    _Query_BTCValidatorDelegations_Handler,
		},
		{
			MethodName: "BTCDelegation",
			Handler:    _Query_BTCDelegation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "babylon/btcstaking/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBTCValidatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBTCValidatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBTCValidatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBTCValidatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBTCValidatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBTCValidatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BtcValidators) > 0 {
		for iNdEx := len(m.BtcValidators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BtcValidators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBTCValidatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBTCValidatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBTCValidatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValBtcPkHex) > 0 {
		i -= len(m.ValBtcPkHex)
		copy(dAtA[i:], m.ValBtcPkHex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValBtcPkHex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBTCValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBTCValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBTCValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BtcValidator != nil {
		{
			size, err := m.BtcValidator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBTCDelegationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBTCDelegationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBTCDelegationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBTCDelegationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBTCDelegationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBTCDelegationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BtcDelegations) > 0 {
		for iNdEx := len(m.BtcDelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BtcDelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBTCValidatorPowerAtHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBTCValidatorPowerAtHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBTCValidatorPowerAtHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ValBtcPkHex) > 0 {
		i -= len(m.ValBtcPkHex)
		copy(dAtA[i:], m.ValBtcPkHex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValBtcPkHex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBTCValidatorPowerAtHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBTCValidatorPowerAtHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBTCValidatorPowerAtHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VotingPower != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VotingPower))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBTCValidatorCurrentPowerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBTCValidatorCurrentPowerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBTCValidatorCurrentPowerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValBtcPkHex) > 0 {
		i -= len(m.ValBtcPkHex)
		copy(dAtA[i:], m.ValBtcPkHex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValBtcPkHex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBTCValidatorCurrentPowerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBTCValidatorCurrentPowerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBTCValidatorCurrentPowerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VotingPower != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VotingPower))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryActiveBTCValidatorsAtHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveBTCValidatorsAtHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveBTCValidatorsAtHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryActiveBTCValidatorsAtHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveBTCValidatorsAtHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveBTCValidatorsAtHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BtcValidators) > 0 {
		for iNdEx := len(m.BtcValidators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BtcValidators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryActivatedHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActivatedHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActivatedHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryActivatedHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActivatedHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActivatedHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBTCValidatorDelegationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBTCValidatorDelegationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBTCValidatorDelegationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValBtcPkHex) > 0 {
		i -= len(m.ValBtcPkHex)
		copy(dAtA[i:], m.ValBtcPkHex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValBtcPkHex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBTCValidatorDelegationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBTCValidatorDelegationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBTCValidatorDelegationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BtcDelegatorDelegations) > 0 {
		for iNdEx := len(m.BtcDelegatorDelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BtcDelegatorDelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBTCDelegationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBTCDelegationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBTCDelegationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakingTxHashHex) > 0 {
		i -= len(m.StakingTxHashHex)
		copy(dAtA[i:], m.StakingTxHashHex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakingTxHashHex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBTCDelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBTCDelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBTCDelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UndelegationInfo != nil {
		{
			size, err := m.UndelegationInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.StakingTxHex) > 0 {
		i -= len(m.StakingTxHex)
		copy(dAtA[i:], m.StakingTxHex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakingTxHex)))
		i--
		dAtA[i] = 0x32
	}
	if m.TotalSat != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalSat))
		i--
		dAtA[i] = 0x28
	}
	if m.EndHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EndHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.StartHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StartHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ValBtcPkList) > 0 {
		for iNdEx := len(m.ValBtcPkList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.ValBtcPkList[iNdEx].Size()
				i -= size
				if _, err := m.ValBtcPkList[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BtcPk != nil {
		{
			size := m.BtcPk.Size()
			i -= size
			if _, err := m.BtcPk.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBTCValidatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBTCValidatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BtcValidators) > 0 {
		for _, e := range m.BtcValidators {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBTCValidatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValBtcPkHex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBTCValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BtcValidator != nil {
		l = m.BtcValidator.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBTCDelegationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBTCDelegationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BtcDelegations) > 0 {
		for _, e := range m.BtcDelegations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBTCValidatorPowerAtHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValBtcPkHex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryBTCValidatorPowerAtHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VotingPower != 0 {
		n += 1 + sovQuery(uint64(m.VotingPower))
	}
	return n
}

func (m *QueryBTCValidatorCurrentPowerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValBtcPkHex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBTCValidatorCurrentPowerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	if m.VotingPower != 0 {
		n += 1 + sovQuery(uint64(m.VotingPower))
	}
	return n
}

func (m *QueryActiveBTCValidatorsAtHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryActiveBTCValidatorsAtHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BtcValidators) > 0 {
		for _, e := range m.BtcValidators {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryActivatedHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryActivatedHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryBTCValidatorDelegationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValBtcPkHex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBTCValidatorDelegationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BtcDelegatorDelegations) > 0 {
		for _, e := range m.BtcDelegatorDelegations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBTCDelegationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakingTxHashHex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBTCDelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BtcPk != nil {
		l = m.BtcPk.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.ValBtcPkList) > 0 {
		for _, e := range m.ValBtcPkList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.StartHeight != 0 {
		n += 1 + sovQuery(uint64(m.StartHeight))
	}
	if m.EndHeight != 0 {
		n += 1 + sovQuery(uint64(m.EndHeight))
	}
	if m.TotalSat != 0 {
		n += 1 + sovQuery(uint64(m.TotalSat))
	}
	l = len(m.StakingTxHex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Active {
		n += 2
	}
	if m.UndelegationInfo != nil {
		l = m.UndelegationInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBTCValidatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBTCValidatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBTCValidatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBTCValidatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBTCValidatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBTCValidatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcValidators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcValidators = append(m.BtcValidators, &BTCValidator{})
			if err := m.BtcValidators[len(m.BtcValidators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBTCValidatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBTCValidatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBTCValidatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValBtcPkHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValBtcPkHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBTCValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBTCValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBTCValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcValidator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BtcValidator == nil {
				m.BtcValidator = &BTCValidator{}
			}
			if err := m.BtcValidator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBTCDelegationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBTCDelegationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBTCDelegationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= BTCDelegationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBTCDelegationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBTCDelegationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBTCDelegationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcDelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcDelegations = append(m.BtcDelegations, &BTCDelegation{})
			if err := m.BtcDelegations[len(m.BtcDelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBTCValidatorPowerAtHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBTCValidatorPowerAtHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBTCValidatorPowerAtHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValBtcPkHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValBtcPkHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBTCValidatorPowerAtHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBTCValidatorPowerAtHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBTCValidatorPowerAtHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPower", wireType)
			}
			m.VotingPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingPower |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBTCValidatorCurrentPowerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBTCValidatorCurrentPowerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBTCValidatorCurrentPowerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValBtcPkHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValBtcPkHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBTCValidatorCurrentPowerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBTCValidatorCurrentPowerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBTCValidatorCurrentPowerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPower", wireType)
			}
			m.VotingPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingPower |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveBTCValidatorsAtHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveBTCValidatorsAtHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveBTCValidatorsAtHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveBTCValidatorsAtHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveBTCValidatorsAtHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveBTCValidatorsAtHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcValidators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcValidators = append(m.BtcValidators, &BTCValidatorWithMeta{})
			if err := m.BtcValidators[len(m.BtcValidators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActivatedHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActivatedHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActivatedHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActivatedHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActivatedHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActivatedHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBTCValidatorDelegationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBTCValidatorDelegationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBTCValidatorDelegationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValBtcPkHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValBtcPkHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBTCValidatorDelegationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBTCValidatorDelegationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBTCValidatorDelegationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcDelegatorDelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtcDelegatorDelegations = append(m.BtcDelegatorDelegations, &BTCDelegatorDelegations{})
			if err := m.BtcDelegatorDelegations[len(m.BtcDelegatorDelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBTCDelegationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBTCDelegationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBTCDelegationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTxHashHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingTxHashHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBTCDelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBTCDelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBTCDelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcPk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonchain_babylon_types.BIP340PubKey
			m.BtcPk = &v
			if err := m.BtcPk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValBtcPkList", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_babylonchain_babylon_types.BIP340PubKey
			m.ValBtcPkList = append(m.ValBtcPkList, v)
			if err := m.ValBtcPkList[len(m.ValBtcPkList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndHeight", wireType)
			}
			m.EndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSat", wireType)
			}
			m.TotalSat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSat |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTxHex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingTxHex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndelegationInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UndelegationInfo == nil {
				m.UndelegationInfo = &BTCUndelegationInfo{}
			}
			if err := m.UndelegationInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
